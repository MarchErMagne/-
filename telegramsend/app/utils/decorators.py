"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã (–∑–∞–≥–ª—É—à–∫–∞)."""
from functools import wraps
from typing import Callable, Any
from aiogram import types
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.database import get_db
from app.database.models import User, SubscriptionStatus
from app.config import SUBSCRIPTION_PLANS
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

def subscription_required(plans: list = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(event: types.TelegramObject, *args, **kwargs):
            user_id = None
            
            if isinstance(event, Message):
                user_id = event.from_user.id
            elif isinstance(event, CallbackQuery):
                user_id = event.from_user.id
            
            if not user_id:
                return await event.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            async for db in get_db():
                user = await db.get(User, user_id)
                if not user:
                    return await event.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                if user.subscription_status != SubscriptionStatus.ACTIVE:
                    return await event.answer(
                        "üîí –î–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n"
                        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
                        reply_markup=None
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                if user.subscription_expires and user.subscription_expires < datetime.utcnow():
                    user.subscription_status = SubscriptionStatus.EXPIRED
                    await db.commit()
                    return await event.answer(
                        "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                        "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if plans and user.subscription_plan not in plans:
                    plan_names = [SUBSCRIPTION_PLANS[p]["name"] for p in plans]
                    return await event.answer(
                        f"üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞–Ω–∞—Ö: {', '.join(plan_names)}\n"
                        "–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ kwargs
                kwargs['user'] = user
                kwargs['db'] = db
                
                return await func(event, *args, **kwargs)
        
        return wrapper
    return decorator

def admin_required(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    
    @wraps(func)
    async def wrapper(event: types.TelegramObject, *args, **kwargs):
        user_id = None
        
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        if user_id not in ADMIN_IDS:
            return await event.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        return await func(event, *args, **kwargs)
    
    return wrapper

def rate_limit(limit: int = 5, window: int = 60):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(event: types.TelegramObject, *args, **kwargs):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É rate limiting —á–µ—Ä–µ–∑ Redis
            return await func(event, *args, **kwargs)
        return wrapper
    return decorator

def log_user_action(action: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(event: types.TelegramObject, *args, **kwargs):
            user_id = None
            username = None
            
            if isinstance(event, Message):
                user_id = event.from_user.id
                username = event.from_user.username
            elif isinstance(event, CallbackQuery):
                user_id = event.from_user.id
                username = event.from_user.username
            
            logger.info(f"User {user_id} (@{username}) performed action: {action}")
            
            return await func(event, *args, **kwargs)
        return wrapper
    return decorator

def handle_errors(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    @wraps(func)
    async def wrapper(event: types.TelegramObject, *args, **kwargs):
        try:
            return await func(event, *args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}", exc_info=True)
            
            error_msg = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            
            if isinstance(event, Message):
                await event.answer(error_msg)
            elif isinstance(event, CallbackQuery):
                await event.answer(error_msg, show_alert=True)
    
    return wrapper