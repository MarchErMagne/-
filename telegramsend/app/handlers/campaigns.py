from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from app.database.database import get_db
from app.database.models import User, Campaign, Sender, Contact, CampaignStatus, SenderType
from app.utils.keyboards import (
    campaign_type_keyboard, campaign_actions_keyboard, 
    back_keyboard, confirm_keyboard
)
from app.utils.decorators import handle_errors, log_user_action, subscription_required
from app.utils.validators import validate_campaign_name, validate_message_content
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

class CampaignStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_sender = State()
    waiting_for_subject = State()
    waiting_for_message = State()

@router.message(F.text == "üìä –ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏")
@subscription_required()
@handle_errors
@log_user_action("campaigns_menu")
async def campaigns_menu(message: types.Message, user: User, db: AsyncSession, **kwargs):
    """–ú–µ–Ω—é –∫–∞–º–ø–∞–Ω–∏–π"""
    result = await db.execute(
        select(Campaign).where(Campaign.user_id == user.id)
        .order_by(Campaign.created_at.desc())
    )
    campaigns = result.scalars().all()
    
    campaigns_text = "üìä <b>–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
    
    if campaigns:
        total_campaigns = len(campaigns)
        active_campaigns = len([c for c in campaigns if c.status == CampaignStatus.RUNNING])
        completed_campaigns = len([c for c in campaigns if c.status == CampaignStatus.COMPLETED])
        
        campaigns_text += (
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_campaigns}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_campaigns}\n\n"
        )
        
        campaigns_text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:</b>\n\n"
        
        status_icons = {
            CampaignStatus.DRAFT: "üìù",
            CampaignStatus.SCHEDULED: "‚è∞",
            CampaignStatus.RUNNING: "üîÑ",
            CampaignStatus.PAUSED: "‚è∏",
            CampaignStatus.COMPLETED: "‚úÖ",
            CampaignStatus.FAILED: "‚ùå"
        }
        
        type_icons = {
            SenderType.TELEGRAM: "üì±",
            SenderType.EMAIL: "üìß",
            SenderType.WHATSAPP: "üí¨",
            SenderType.SMS: "üìû",
            SenderType.VIBER: "üü£"
        }
        
        for campaign in campaigns[:5]:
            status_icon = status_icons.get(campaign.status, "‚ùì")
            type_icon = type_icons.get(campaign.type, "‚ùì")
            
            progress = ""
            if campaign.total_contacts and campaign.total_contacts > 0:
                sent_percent = (campaign.sent_count / campaign.total_contacts) * 100
                progress = f"({campaign.sent_count}/{campaign.total_contacts} - {sent_percent:.1f}%)"
            
            campaigns_text += (
                f"{type_icon} <b>{campaign.name}</b>\n"
                f"   {status_icon} {campaign.status.value.capitalize()} {progress}\n"
                f"   üìÖ {campaign.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è", callback_data="new_campaign")],
                [types.InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="all_campaigns")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    else:
        campaigns_text += (
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏!"
        )
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="new_campaign")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    
    await message.answer(campaigns_text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "campaigns_menu")
@handle_errors
async def campaigns_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –º–µ–Ω—é –∫–∞–º–ø–∞–Ω–∏–π"""
    await state.clear()
    
    user_id = callback.from_user.id
    
    async for db in get_db():
        from sqlalchemy import select
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
            return
        
        result = await db.execute(
            select(Campaign).where(Campaign.user_id == user.id)
            .order_by(Campaign.created_at.desc())
        )
        campaigns = result.scalars().all()
        
        campaigns_text = "üìä <b>–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
        
        if campaigns:
            total_campaigns = len(campaigns)
            active_campaigns = len([c for c in campaigns if c.status == CampaignStatus.RUNNING])
            completed_campaigns = len([c for c in campaigns if c.status == CampaignStatus.COMPLETED])
            
            campaigns_text += (
                f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_campaigns}\n"
                f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_campaigns}\n\n"
            )
            
            campaigns_text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:</b>\n\n"
            
            status_icons = {
                CampaignStatus.DRAFT: "üìù",
                CampaignStatus.SCHEDULED: "‚è∞", 
                CampaignStatus.RUNNING: "üîÑ",
                CampaignStatus.PAUSED: "‚è∏",
                CampaignStatus.COMPLETED: "‚úÖ",
                CampaignStatus.FAILED: "‚ùå"
            }
            
            type_icons = {
                SenderType.TELEGRAM: "üì±",
                SenderType.EMAIL: "üìß",
                SenderType.WHATSAPP: "üí¨",
                SenderType.SMS: "üìû",
                SenderType.VIBER: "üü£"
            }
            
            for campaign in campaigns[:5]:
                status_icon = status_icons.get(campaign.status, "‚ùì")
                type_icon = type_icons.get(campaign.type, "‚ùì")
                
                progress = ""
                if campaign.total_contacts and campaign.total_contacts > 0:
                    sent_percent = (campaign.sent_count / campaign.total_contacts) * 100
                    progress = f"({campaign.sent_count}/{campaign.total_contacts} - {sent_percent:.1f}%)"
                
                campaigns_text += (
                    f"{type_icon} <b>{campaign.name}</b>\n"
                    f"   {status_icon} {campaign.status.value.capitalize()} {progress}\n"
                    f"   üìÖ {campaign.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è", callback_data="new_campaign")],
                    [types.InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="all_campaigns")],
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]
            )
        else:
            campaigns_text += (
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏!"
            )
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="new_campaign")],
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]
            )
        
        await callback.message.edit_text(campaigns_text, parse_mode="HTML", reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data == "new_campaign")
@handle_errors
async def new_campaign_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
    user_id = callback.from_user.id
    
    async for db in get_db():
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        result = await db.execute(
            select(func.count(Sender.id)).where(
                Sender.user_id == user.id,
                Sender.is_active == True
            )
        )
        senders_count = result.scalar()
        
        if senders_count == 0:
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π</b>\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.",
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üìß –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data="senders_menu")],
                        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="campaigns_menu")]
                    ]
                )
            )
            return
        
        await callback.message.edit_text(
            "üöÄ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
            parse_mode="HTML",
            reply_markup=campaign_type_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("campaign_"))
@handle_errors
async def select_campaign_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏, –∞ –Ω–µ –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞
    data_parts = callback.data.split("_")
    if len(data_parts) < 2:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
        return
    
    campaign_type = data_parts[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏
    valid_types = ["telegram", "email", "whatsapp", "sms", "viber"]
    if campaign_type not in valid_types:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    async for db in get_db():
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        sender_type = SenderType(campaign_type)
        result = await db.execute(
            select(func.count(Sender.id)).where(
                Sender.user_id == user.id,
                Sender.type == sender_type,
                Sender.is_active == True
            )
        )
        senders_count = result.scalar()
        
        if senders_count == 0:
            type_names = {
                "telegram": "Telegram",
                "email": "Email", 
                "whatsapp": "WhatsApp",
                "sms": "SMS",
                "viber": "Viber"
            }
            
            await callback.answer(
                f"–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —Ç–∏–ø–∞ {type_names[campaign_type]}",
                show_alert=True
            )
            return
        
        await state.update_data(campaign_type=campaign_type)
        
        await callback.message.edit_text(
            f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ {campaign_type.capitalize()} –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:",
            parse_mode="HTML",
            reply_markup=back_keyboard("new_campaign")
        )
        
        await state.set_state(CampaignStates.waiting_for_name)
    
    await callback.answer()

@router.message(CampaignStates.waiting_for_name)
@handle_errors
async def process_campaign_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    name = message.text.strip()
    
    is_valid, result = validate_campaign_name(name)
    if not is_valid:
        await message.answer(f"‚ùå {result}")
        return
    
    await state.update_data(campaign_name=result)
    
    data = await state.get_data()
    campaign_type = data["campaign_type"]
    sender_type = SenderType(campaign_type)
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        result = await db.execute(
            select(Sender).where(
                Sender.user_id == user.id,
                Sender.type == sender_type,
                Sender.is_active == True
            )
        )
        senders = result.scalars().all()
    
    if len(senders) == 1:
        await state.update_data(sender_id=senders[0].id)
        await ask_for_message(message, state)
    else:
        senders_text = "üìß <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b>\n\n"
        
        keyboard_buttons = []
        for sender in senders:
            status_icon = "‚úÖ" if sender.is_verified else "‚ö†Ô∏è"
            senders_text += f"{status_icon} {sender.name}\n"
            
            keyboard_buttons.append([
                types.InlineKeyboardButton(
                    text=f"{status_icon} {sender.name}",
                    callback_data=f"select_sender_{sender.id}"
                )
            ])
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="new_campaign")
        ])
        
        await message.answer(
            senders_text,
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        
        await state.set_state(CampaignStates.waiting_for_sender)

@router.callback_query(F.data.startswith("select_sender_"))
@handle_errors
async def select_sender(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    sender_id = int(callback.data.split("_")[2])
    await state.update_data(sender_id=sender_id)
    
    await ask_for_message(callback.message, state)
    await callback.answer()

async def ask_for_message(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = await state.get_data()
    campaign_type = data["campaign_type"]
    
    if campaign_type == "email":
        await message.answer(
            "‚úâÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞:</b>",
            parse_mode="HTML"
        )
        await state.set_state(CampaignStates.waiting_for_subject)
    else:
        await message.answer(
            "üí¨ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
            "üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
            "‚Ä¢ {first_name} - –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
            "‚Ä¢ {last_name} - —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
            "‚Ä¢ {datetime} - —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            parse_mode="HTML"
        )
        await state.set_state(CampaignStates.waiting_for_message)

@router.message(CampaignStates.waiting_for_subject)
@handle_errors
async def process_email_subject(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã email"""
    subject = message.text.strip()
    
    if not subject:
        await message.answer("‚ùå –¢–µ–º–∞ –ø–∏—Å—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        return
    
    if len(subject) > 200:
        await message.answer("‚ùå –¢–µ–º–∞ –ø–∏—Å—å–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    await state.update_data(subject=subject)
    
    await message.answer(
        "üí¨ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:</b>\n\n"
        "üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
        "‚Ä¢ {first_name} - –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        "‚Ä¢ {last_name} - —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        "‚Ä¢ {datetime} - —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
        parse_mode="HTML"
    )
    await state.set_state(CampaignStates.waiting_for_message)

@router.message(CampaignStates.waiting_for_message)
@handle_errors
async def process_campaign_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = message.text.strip()
    
    is_valid, result = validate_message_content(text)
    if not is_valid:
        await message.answer(f"‚ùå {result}")
        return
    
    await state.update_data(message=result)
    
    data = await state.get_data()
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        campaign = Campaign(
            user_id=user.id,
            name=data["campaign_name"],
            type=SenderType(data["campaign_type"]),
            sender_id=data["sender_id"],
            subject=data.get("subject"),
            message=data["message"],
            status=CampaignStatus.DRAFT
        )
        
        db.add(campaign)
        await db.commit()
        await db.refresh(campaign)
        
        success_text = (
            f"‚úÖ <b>–ö–∞–º–ø–∞–Ω–∏—è '{campaign.name}' —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìù <b>–¢–∏–ø:</b> {campaign.type.value.capitalize()}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ß–µ—Ä–Ω–æ–≤–∏–∫\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é."
        )
        
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=campaign_actions_keyboard(campaign.id, campaign.status.value)
        )
        
        await state.clear()
        logger.info(f"Campaign created: {campaign.id} by user {user.telegram_id}")

@router.callback_query(F.data.startswith("campaign_start_"))
@handle_errors
async def start_campaign(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏"""
    campaign_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async for db in get_db():
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        campaign = await db.get(Campaign, campaign_id)
        if not campaign or campaign.user_id != user.id:
            await callback.answer("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if campaign.status != CampaignStatus.DRAFT:
            await callback.answer("–ö–∞–º–ø–∞–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        result = await db.execute(
            select(func.count(Contact.id)).where(
                Contact.user_id == user.id,
                Contact.type == campaign.type,
                Contact.is_active == True
            )
        )
        contacts_count = result.scalar()
        
        if contacts_count == 0:
            await callback.answer("–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Celery (–ø–æ–∫–∞ –±–µ–∑ Celery)
        campaign.status = CampaignStatus.RUNNING
        campaign.started_at = datetime.utcnow()
        campaign.total_contacts = contacts_count
        await db.commit()
        
        await callback.message.edit_text(
            f"üöÄ <b>–ö–∞–º–ø–∞–Ω–∏—è '{campaign.name}' –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            f"üìä –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {contacts_count}\n"
            f"üì± –¢–∏–ø: {campaign.type.value.capitalize()}\n\n"
            f"‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            f"–ö–∞–º–ø–∞–Ω–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è.",
            parse_mode="HTML",
            reply_markup=back_keyboard("campaigns_menu")
        )
        
        await callback.answer("–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info(f"Campaign {campaign_id} started by user {user.telegram_id}")

@router.callback_query(F.data == "all_campaigns")
@handle_errors
async def all_campaigns(callback: types.CallbackQuery):
    """–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    async for db in get_db():
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        result = await db.execute(
            select(Campaign).where(Campaign.user_id == user.id)
            .order_by(Campaign.created_at.desc())
            .limit(10)
        )
        campaigns = result.scalars().all()
        
        if not campaigns:
            await callback.message.edit_text(
                "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π</b>",
                parse_mode="HTML",
                reply_markup=back_keyboard("campaigns_menu")
            )
            return
        
        campaigns_text = "üìã <b>–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
        
        keyboard_buttons = []
        
        for campaign in campaigns:
            status_icons = {
                CampaignStatus.DRAFT: "üìù",
                CampaignStatus.RUNNING: "üîÑ",
                CampaignStatus.COMPLETED: "‚úÖ",
                CampaignStatus.FAILED: "‚ùå",
                CampaignStatus.PAUSED: "‚è∏"
            }
            
            icon = status_icons.get(campaign.status, "‚ùì")
            campaigns_text += f"{icon} {campaign.name} - {campaign.status.value}\n"
            
            keyboard_buttons.append([
                types.InlineKeyboardButton(
                    text=f"{icon} {campaign.name}",
                    callback_data=f"view_campaign_{campaign.id}"
                )
            ])
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="campaigns_menu")
        ])
        
        await callback.message.edit_text(
            campaigns_text,
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("view_campaign_"))
@handle_errors
async def view_campaign(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏"""
    campaign_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async for db in get_db():
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        campaign = await db.get(Campaign, campaign_id)
        if not campaign or campaign.user_id != user.id:
            await callback.answer("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        success_rate = 0
        if campaign.total_contacts and campaign.total_contacts > 0:
            success_rate = (campaign.sent_count / campaign.total_contacts) * 100
        
        campaign_text = (
            f"üìä <b>{campaign.name}</b>\n\n"
            f"üì± <b>–¢–∏–ø:</b> {campaign.type.value.capitalize()}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {campaign.status.value.capitalize()}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {campaign.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if campaign.started_at:
            campaign_text += f"üöÄ <b>–ó–∞–ø—É—â–µ–Ω–∞:</b> {campaign.started_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if campaign.completed_at:
            campaign_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {campaign.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        campaign_text += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        
        if campaign.total_contacts:
            campaign_text += (
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {campaign.total_contacts}\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {campaign.sent_count or 0}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {campaign.failed_count or 0}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
            )
        else:
            campaign_text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        
        if campaign.subject:
            campaign_text += f"\n‚úâÔ∏è <b>–¢–µ–º–∞:</b> {campaign.subject}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_preview = campaign.message[:100] + "..." if len(campaign.message) > 100 else campaign.message
        campaign_text += f"\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<i>{message_preview}</i>"
        
        await callback.message.edit_text(
            campaign_text,
            parse_mode="HTML",
            reply_markup=campaign_actions_keyboard(campaign.id, campaign.status.value)
        )
    
    await callback.answer()