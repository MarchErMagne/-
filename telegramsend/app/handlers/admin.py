from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, text
from app.database.database import get_db
from app.database.models import User, Campaign, Contact, Payment, SubscriptionStatus
from app.utils.decorators import handle_errors, admin_required, log_user_action
from app.config import SUBSCRIPTION_PLANS
from datetime import datetime, timedelta
import logging

router = Router()
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
ADMIN_IDS = [123456789, 987654321]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤

class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()
    waiting_for_user_id = State()
    waiting_for_subscription_days = State()

@router.message(Command("admin"))
@admin_required
@handle_errors
@log_user_action("admin_panel")
async def admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    async for db in get_db():
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        users_result = await db.execute(select(func.count(User.id)))
        total_users = users_result.scalar()
        
        active_users_result = await db.execute(
            select(func.count(User.id)).where(User.subscription_status == SubscriptionStatus.ACTIVE)
        )
        active_users = active_users_result.scalar()
        
        campaigns_result = await db.execute(select(func.count(Campaign.id)))
        total_campaigns = campaigns_result.scalar()
        
        payments_result = await db.execute(
            select(func.count(Payment.id)).where(Payment.status == "paid")
        )
        total_payments = payments_result.scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.utcnow() - timedelta(days=1)
        
        new_users_result = await db.execute(
            select(func.count(User.id)).where(User.created_at >= yesterday)
        )
        new_users = new_users_result.scalar()
        
        new_payments_result = await db.execute(
            select(func.count(Payment.id)).where(
                and_(Payment.paid_at >= yesterday, Payment.status == "paid")
            )
        )
        new_payments = new_payments_result.scalar()
        
        # –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
        month_ago = datetime.utcnow() - timedelta(days=30)
        revenue_result = await db.execute(
            select(func.sum(Payment.amount)).where(
                and_(Payment.paid_at >= month_ago, Payment.status == "paid")
            )
        )
        monthly_revenue = (revenue_result.scalar() or 0) / 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–æ–ª–ª–∞—Ä—ã
    
    admin_text = (
        f"üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}\n"
        f"üì¨ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n\n"
        f"üìà <b>–ó–∞ 24 —á–∞—Å–∞:</b>\n"
        f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}\n"
        f"üí≥ –ù–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {new_payments}\n\n"
        f"üíµ <b>–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü:</b> ${monthly_revenue:.2f}\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        f"/user &lt;id&gt; - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        f"/grant &lt;id&gt; &lt;plan&gt; &lt;days&gt; - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"/revoke &lt;id&gt; - –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"/cleanup - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
            ],
            [
                types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                types.InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")
            ],
            [
                types.InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="admin_cleanup"),
                types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ]
        ]
    )
    
    await message.answer(admin_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("stats"))
@admin_required
@handle_errors
async def admin_stats(message: types.Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    async for db in get_db():
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º –ø–æ–¥–ø–∏—Å–∫–∏
        plan_stats = {}
        for plan_id in SUBSCRIPTION_PLANS.keys():
            result = await db.execute(
                select(func.count(User.id)).where(
                    and_(
                        User.subscription_plan == plan_id,
                        User.subscription_status == SubscriptionStatus.ACTIVE
                    )
                )
            )
            count = result.scalar()
            if count > 0:
                plan_stats[plan_id] = count
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        daily_stats = []
        for i in range(7):
            day_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=i)
            day_end = day_start + timedelta(days=1)
            
            result = await db.execute(
                select(func.count(User.id)).where(
                    and_(User.created_at >= day_start, User.created_at < day_end)
                )
            )
            count = result.scalar()
            daily_stats.append((day_start.strftime('%d.%m'), count))
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        result = await db.execute(
            select(
                User.telegram_id,
                User.first_name,
                func.count(Campaign.id).label('campaigns_count')
            )
            .join(Campaign, User.id == Campaign.user_id)
            .group_by(User.id, User.telegram_id, User.first_name)
            .order_by(func.count(Campaign.id).desc())
            .limit(5)
        )
        top_users = result.all()
    
    stats_text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    if plan_stats:
        stats_text += "<b>–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–ª–∞–Ω–∞–º:</b>\n"
        for plan_id, count in plan_stats.items():
            plan_name = SUBSCRIPTION_PLANS[plan_id]["name"]
            stats_text += f"‚Ä¢ {plan_name}: {count}\n"
        stats_text += "\n"
    
    if daily_stats:
        stats_text += "<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º:</b>\n"
        for date_str, count in reversed(daily_stats):
            stats_text += f"‚Ä¢ {date_str}: {count}\n"
        stats_text += "\n"
    
    if top_users:
        stats_text += "<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
        for user_id, name, campaigns_count in top_users:
            stats_text += f"‚Ä¢ {name} ({user_id}): {campaigns_count} –∫–∞–º–ø–∞–Ω–∏–π\n"
    
    await message.answer(stats_text, parse_mode="HTML")

@router.message(Command("broadcast"))
@admin_required
@handle_errors
async def admin_broadcast_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    await message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_broadcast_message)

@router.message(AdminStates.waiting_for_broadcast_message)
@admin_required
@handle_errors
async def admin_broadcast_send(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    broadcast_text = message.text
    
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await db.execute(select(User.telegram_id))
        user_ids = [row[0] for row in result.all()]
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_text = (
        f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{broadcast_text}\n\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {len(user_ids)}\n\n"
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_broadcast"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
            ]
        ]
    )
    
    await state.update_data(broadcast_text=broadcast_text, user_ids=user_ids)
    await message.answer(confirm_text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "confirm_broadcast")
@admin_required
@handle_errors
async def admin_broadcast_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    
    data = await state.get_data()
    broadcast_text = data["broadcast_text"]
    user_ids = data["user_ids"]
    
    await callback.message.edit_text(
        f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_count = 0
    failed_count = 0
    
    for user_id in user_ids:
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{broadcast_text}",
                parse_mode="HTML"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await asyncio.sleep(0.05)
    
    result_text = (
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        f"üìä –í—Å–µ–≥–æ: {len(user_ids)}"
    )
    
    await callback.message.edit_text(result_text, parse_mode="HTML")
    await state.clear()
    
    logger.info(f"Admin broadcast completed: {sent_count} sent, {failed_count} failed")

@router.callback_query(F.data == "cancel_broadcast")
@admin_required
@handle_errors
async def admin_broadcast_cancelled(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@router.message(Command("user"))
@admin_required
@handle_errors
async def admin_user_info(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <telegram_id>")
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        campaigns_result = await db.execute(
            select(func.count(Campaign.id)).where(Campaign.user_id == user.id)
        )
        campaigns_count = campaigns_result.scalar()
        
        contacts_result = await db.execute(
            select(func.count(Contact.id)).where(Contact.user_id == user.id)
        )
        contacts_count = contacts_result.scalar()
        
        payments_result = await db.execute(
            select(func.count(Payment.id), func.sum(Payment.amount)).where(
                and_(Payment.user_id == user.id, Payment.status == "paid")
            )
        )
        payments_data = payments_result.first()
        payments_count = payments_data[0] or 0
        total_paid = (payments_data[1] or 0) / 100
    
    user_info_text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"üÜî <b>ID:</b> {user.telegram_id}\n"
        f"üë®‚Äçüíº <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìù <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåê <b>–Ø–∑—ã–∫:</b> {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
        f"‚Ä¢ –ü–ª–∞–Ω: {user.subscription_plan or '–ù–µ—Ç'}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.subscription_status.value if user.subscription_status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
        f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {user.subscription_expires.strftime('%d.%m.%Y %H:%M') if user.subscription_expires else '–ù–µ—Ç'}\n\n"
        f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–π: {campaigns_count}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}\n"
        f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${total_paid:.2f}"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üí≥ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                    callback_data=f"grant_sub_{user.telegram_id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                    callback_data=f"revoke_sub_{user.telegram_id}"
                )
            ]
        ]
    )
    
    await message.answer(user_info_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("grant"))
@admin_required
@handle_errors
async def admin_grant_subscription(message: types.Message):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /grant <user_id> <plan> <days>
    args = message.text.split()
    if len(args) < 4:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <plan> <days>\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {', '.join(SUBSCRIPTION_PLANS.keys())}"
        )
        return
    
    try:
        user_id = int(args[1])
        plan = args[2]
        days = int(args[3])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        return
    
    if plan not in SUBSCRIPTION_PLANS:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(SUBSCRIPTION_PLANS.keys())}")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user.subscription_plan = plan
        user.subscription_status = SubscriptionStatus.ACTIVE
        user.subscription_expires = datetime.utcnow() + timedelta(days=days)
        
        await db.commit()
    
    plan_name = SUBSCRIPTION_PLANS[plan]["name"]
    success_text = (
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üíº –ü–ª–∞–Ω: {plan_name}\n"
        f"üìÖ –ù–∞ –¥–Ω–µ–π: {days}\n"
        f"‚è∞ –î–æ: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(success_text, parse_mode="HTML")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=(
                f"üéâ <b>–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                f"üíº –ü–ª–∞–Ω: {plan_name}\n"
                f"üìÖ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about granted subscription: {e}")

@router.message(Command("revoke"))
@admin_required
@handle_errors
async def admin_revoke_subscription(message: types.Message):
    """–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        old_plan = user.subscription_plan
        user.subscription_plan = None
        user.subscription_status = SubscriptionStatus.CANCELLED
        user.subscription_expires = datetime.utcnow()
        
        await db.commit()
    
    success_text = (
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üíº –ë—ã–ª –ø–ª–∞–Ω: {old_plan or '–ù–µ—Ç'}\n"
        f"üìÖ –û—Ç–æ–∑–≤–∞–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(success_text, parse_mode="HTML")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞</b>\n\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É."
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about revoked subscription: {e}")

@router.message(Command("cleanup"))
@admin_required
@handle_errors
async def admin_cleanup(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    async for db in get_db():
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∫–∞–º–ø–∞–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
        cutoff_date = datetime.utcnow() - timedelta(days=90)
        
        result = await db.execute(
            text("DELETE FROM campaign_logs WHERE sent_at < :cutoff_date"),
            {"cutoff_date": cutoff_date}
        )
        deleted_logs = result.rowcount
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        payment_cutoff = datetime.utcnow() - timedelta(hours=24)
        
        result = await db.execute(
            text("DELETE FROM payments WHERE status = 'pending' AND created_at < :cutoff_date"),
            {"cutoff_date": payment_cutoff}
        )
        deleted_payments = result.rowcount
        
        await db.commit()
    
    cleanup_text = (
        f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìù –£–¥–∞–ª–µ–Ω–æ –ª–æ–≥–æ–≤: {deleted_logs}\n"
        f"üí≥ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {deleted_payments}\n"
        f"üìÖ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π"
    )
    
    await message.answer(cleanup_text, parse_mode="HTML")
    logger.info(f"Admin cleanup completed: {deleted_logs} logs, {deleted_payments} payments deleted")

# –ò–º–ø–æ—Ä—Ç asyncio –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
import asyncio