from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.database.database import get_db
from app.database.models import User, SubscriptionStatus
from app.utils.keyboards import main_menu_keyboard, subscription_keyboard
from app.utils.decorators import handle_errors, log_user_action
from app.config import SUBSCRIPTION_PLANS
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
@handle_errors
@log_user_action("start_command")
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_data = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for db in get_db():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == user_data.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_data.id,
                username=user_data.username,
                first_name=user_data.first_name,
                last_name=user_data.last_name,
                language_code=user_data.language_code or "ru"
            )
            db.add(user)
            await db.commit()
            await db.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            logger.info(f"New user created: {user_data.id}")
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            welcome_text = (
                "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TelegramSender Pro!</b>\n\n"
                "–≠—Ç–æ –º–æ—â–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
                "üì± Telegram\n"
                "üìß Email\n" 
                "üí¨ WhatsApp\n"
                "üìû SMS\n"
                "üü£ Viber\n\n"
                "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                "‚Ä¢ –£–º–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n"
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
                "‚Ä¢ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è\n"
                "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
                "üí∞ <b>–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n"
            )
            
            for plan_id, plan in SUBSCRIPTION_PLANS.items():
                price_usd = plan["price"] / 100
                welcome_text += f"‚Ä¢ <b>{plan['name']}</b> - ${price_usd:.2f}/–º–µ—Å\n"
                for feature in plan["features"]:
                    welcome_text += f"  ‚úì {feature}\n"
                welcome_text += "\n"
            
            welcome_text += (
                "üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—é–±–æ–π –ø–ª–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
            )
            
            await message.answer(
                welcome_text,
                parse_mode="HTML",
                reply_markup=subscription_keyboard()
            )
            
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = user_data.username
            user.first_name = user_data.first_name
            user.last_name = user_data.last_name
            user.updated_at = datetime.utcnow()
            await db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_text = ""
            if user.subscription_status == SubscriptionStatus.ACTIVE:
                if user.subscription_expires:
                    days_left = (user.subscription_expires - datetime.utcnow()).days
                    if days_left > 0:
                        subscription_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {user.subscription_plan.capitalize()}\nüìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
                    else:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                        user.subscription_status = SubscriptionStatus.EXPIRED
                        await db.commit()
                        subscription_text = "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n\n"
                else:
                    subscription_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {user.subscription_plan.capitalize()}\n\n"
            else:
                subscription_text = "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n"
            
            welcome_back_text = (
                f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!</b>\n\n"
                f"{subscription_text}"
                "üéõ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n"
                "üìä <b>–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏\n"
                "üìß <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                "üë• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
                "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –æ—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> - —Ç–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∞\n"
                "ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> - –ø–æ–º–æ—â—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
            )
            
            await message.answer(
                welcome_back_text,
                parse_mode="HTML",
                reply_markup=main_menu_keyboard()
            )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@handle_errors
@log_user_action("help_command")
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
        "üìä <b>–ö–∞–º–ø–∞–Ω–∏–∏</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –±–∞—Ç—á–µ–π\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
        "üìß <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ Telegram: API ID + API Hash\n"
        "‚Ä¢ Email: SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ WhatsApp: Twilio –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ SMS/Viber: API –∫–ª—é—á–∏\n\n"
        "üë• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ .txt —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏\n"
        "‚Ä¢ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n\n"
        "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏—è –∏ –∫–ª–∏–∫–∏\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤\n\n"
        "ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ CTA\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username"
    )
    
    await message.answer(help_text, parse_mode="HTML")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@handle_errors
@log_user_action("settings_command")
async def settings_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìß <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üåê <b>–Ø–∑—ã–∫:</b> {user.language_code}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
            f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {user.subscription_plan or '–ù–µ—Ç'}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {user.subscription_status.value if user.subscription_status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        
        await message.answer(settings_text, parse_mode="HTML")

@router.callback_query(F.data == "back_to_menu")
@handle_errors
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_text = ""
        if user.subscription_status == SubscriptionStatus.ACTIVE:
            if user.subscription_expires:
                days_left = (user.subscription_expires - datetime.utcnow()).days
                if days_left > 0:
                    subscription_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {user.subscription_plan.capitalize()}\nüìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
                else:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    user.subscription_status = SubscriptionStatus.EXPIRED
                    await db.commit()
                    subscription_text = "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n\n"
            else:
                subscription_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {user.subscription_plan.capitalize()}\n\n"
        else:
            subscription_text = "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n"
        
        main_menu_text = (
            f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"{subscription_text}"
            "üéõ <b>–†–∞–∑–¥–µ–ª—ã:</b>\n"
            "üìä <b>–ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏\n"
            "üìß <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            "üë• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
            "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –æ—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> - —Ç–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∞\n"
            "ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> - –ø–æ–º–æ—â—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        )
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üìä –ö–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns_menu"),
                    types.InlineKeyboardButton(text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏", callback_data="senders_menu")
                ],
                [
                    types.InlineKeyboardButton(text="üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_menu"),
                    types.InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_menu")
                ],
                [
                    types.InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription_menu"),
                    types.InlineKeyboardButton(text="ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="ai_assistant_menu")
                ]
            ]
        )
        
        await callback.message.edit_text(
            main_menu_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await callback.answer()