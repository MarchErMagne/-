from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_
from app.database.database import get_db
from app.database.models import User, Contact, FileUpload, SenderType
from app.utils.keyboards import contacts_keyboard, file_type_keyboard, back_keyboard
from app.utils.decorators import handle_errors, log_user_action, subscription_required
from app.utils.validators import parse_contacts_file
from app.config import settings, SUBSCRIPTION_PLANS
import aiofiles
import os
import uuid
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

class ContactStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_manual_contact = State()
    waiting_for_contact_name = State()

@router.message(F.text == "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã")
@subscription_required()
@handle_errors
@log_user_action("contacts_menu")
async def contacts_menu(message: types.Message, user: User, db: AsyncSession):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == True
        )
    )
    total_contacts = result.scalar()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    type_stats = {}
    for sender_type in SenderType:
        result = await db.execute(
            select(func.count(Contact.id)).where(
                and_(
                    Contact.user_id == user.id,
                    Contact.type == sender_type,
                    Contact.is_active == True
                )
            )
        )
        type_stats[sender_type] = result.scalar()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    limit = plan["contacts_limit"]
    
    contacts_text = (
        f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts:,}/{limit:,}\n\n"
        f"üìà <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
        f"üì± Telegram: {type_stats.get(SenderType.TELEGRAM, 0):,}\n"
        f"üìß Email: {type_stats.get(SenderType.EMAIL, 0):,}\n"
        f"üí¨ WhatsApp: {type_stats.get(SenderType.WHATSAPP, 0):,}\n"
        f"üìû SMS: {type_stats.get(SenderType.SMS, 0):,}\n"
        f"üü£ Viber: {type_stats.get(SenderType.VIBER, 0):,}\n\n"
    )
    
    if total_contacts >= limit:
        contacts_text += f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∞ {user.subscription_plan.capitalize()}"
        keyboard = back_keyboard("back_to_menu")
    else:
        contacts_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = contacts_keyboard()
    
    await message.answer(
        contacts_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "contacts_upload")
@subscription_required()
@handle_errors
async def contacts_upload_start(callback: types.CallbackQuery, state: FSMContext, user: User, db: AsyncSession):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == True
        )
    )
    current_contacts = result.scalar()
    
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    if current_contacts >= plan["contacts_limit"]:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        parse_mode="HTML",
        reply_markup=file_type_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("file_"))
@handle_errors
async def select_file_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    file_type = callback.data.split("_")[1]
    await state.update_data(file_type=file_type)
    
    type_descriptions = {
        "telegram": "username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram",
        "email": "email –∞–¥—Ä–µ—Å–∞",
        "phone": "–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–¥–ª—è SMS/WhatsApp/Viber)"
    }
    
    format_examples = {
        "telegram": "@username\n123456789\nuser2\n@another_user",
        "email": "user@example.com\ntest@gmail.com\nsupport@company.com",
        "phone": "+79123456789\n+1234567890\n+380123456789"
    }
    
    upload_text = (
        f"üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ {type_descriptions[file_type]}</b>\n\n"
        f"üìã <b>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</b>\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)\n"
        f"‚Ä¢ –û–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.MAX_FILE_SIZE // 1024 // 1024}MB\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:</b>\n"
        f"<code>{format_examples[file_type]}</code>\n\n"
        f"üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:</b>"
    )
    
    await callback.message.edit_text(
        upload_text,
        parse_mode="HTML",
        reply_markup=back_keyboard("contacts_upload")
    )
    
    await state.set_state(ContactStates.waiting_for_file)
    await callback.answer()

@router.message(ContactStates.waiting_for_file, F.document)
@handle_errors
async def process_file_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if document.file_size > settings.MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.MAX_FILE_SIZE // 1024 // 1024}MB"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not document.file_name.endswith('.txt'):
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã")
        return
    
    data = await state.get_data()
    file_type = data["file_type"]
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(document.file_id)
        file_path = os.path.join(settings.UPLOAD_DIR, f"{uuid.uuid4()}.txt")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(settings.UPLOAD_DIR, exist_ok=True)
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
            content = await f.read()
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        valid_contacts, invalid_contacts = parse_contacts_file(content, file_type)
        
        if not valid_contacts:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            os.remove(file_path)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        async for db in get_db():
            result = await db.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            result = await db.execute(
                select(func.count(Contact.id)).where(
                    Contact.user_id == user.id,
                    Contact.is_active == True
                )
            )
            current_contacts = result.scalar()
            
            plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
            available_slots = plan["contacts_limit"] - current_contacts
            
            if len(valid_contacts) > available_slots:
                await message.answer(
                    f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ {available_slots} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {len(valid_contacts)}\n"
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–ª–∞–Ω–∞ {user.subscription_plan.capitalize()}"
                )
                valid_contacts = valid_contacts[:available_slots]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_upload = FileUpload(
                user_id=user.id,
                filename=os.path.basename(file_path),
                original_filename=document.file_name,
                file_size=document.file_size,
                file_type=file_type,
                upload_path=file_path,
                contacts_count=len(valid_contacts)
            )
            
            db.add(file_upload)
            await db.commit()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_type_map = {
                "telegram": SenderType.TELEGRAM,
                "email": SenderType.EMAIL,
                "phone": SenderType.SMS  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            }
            contact_type = contact_type_map[file_type]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            new_contacts = 0
            duplicate_contacts = 0
            
            for contact_id in valid_contacts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                result = await db.execute(
                    select(Contact).where(
                        and_(
                            Contact.user_id == user.id,
                            Contact.identifier == contact_id,
                            Contact.type == contact_type
                        )
                    )
                )
                existing_contact = result.scalar_one_or_none()
                
                if existing_contact:
                    duplicate_contacts += 1
                    continue
                
                contact = Contact(
                    user_id=user.id,
                    identifier=contact_id,
                    type=contact_type,
                    is_active=True
                )
                
                db.add(contact)
                new_contacts += 1
            
            await db.commit()
            
            # –û—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ
            result_text = (
                f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {new_contacts}\n"
                f"‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {duplicate_contacts}\n"
            )
            
            if invalid_contacts:
                result_text += f"‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(invalid_contacts)}\n"
                
                if len(invalid_contacts) <= 10:
                    result_text += f"\n‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n"
                    for invalid in invalid_contacts:
                        result_text += f"‚Ä¢ {invalid}\n"
                else:
                    result_text += f"\n‚ùå –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 10 –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(invalid_contacts)}\n"
                    for invalid in invalid_contacts[:10]:
                        result_text += f"‚Ä¢ {invalid}\n"
            
            await message.answer(
                result_text,
                parse_mode="HTML",
                reply_markup=back_keyboard("contacts_menu")
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
            except:
                pass
            
            await state.clear()
            logger.info(f"Contacts uploaded: {new_contacts} new contacts for user {user.telegram_id}")
    
    except Exception as e:
        logger.error(f"Error processing file upload: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            os.remove(file_path)
        except:
            pass

@router.callback_query(F.data == "contacts_add_manual")
@subscription_required()
@handle_errors
async def contacts_add_manual_start(callback: types.CallbackQuery, state: FSMContext, user: User, db: AsyncSession):
    """–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == True
        )
    )
    current_contacts = result.scalar()
    
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    if current_contacts >= plan["contacts_limit"]:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë§ <b>–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=file_type_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "contacts_lists")
@subscription_required()
@handle_errors
async def contacts_lists(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    stats_by_type = {}
    for sender_type in SenderType:
        result = await db.execute(
            select(func.count(Contact.id)).where(
                and_(
                    Contact.user_id == user.id,
                    Contact.type == sender_type,
                    Contact.is_active == True
                )
            )
        )
        count = result.scalar()
        if count > 0:
            stats_by_type[sender_type] = count
    
    if not stats_by_type:
        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—Ä—É—á–Ω—É—é.",
            parse_mode="HTML",
            reply_markup=back_keyboard("contacts_menu")
        )
        return
    
    lists_text = "üìã <b>–ú–æ–∏ —Å–ø–∏—Å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
    
    type_icons = {
        SenderType.TELEGRAM: "üì±",
        SenderType.EMAIL: "üìß",
        SenderType.WHATSAPP: "üí¨",
        SenderType.SMS: "üìû",
        SenderType.VIBER: "üü£"
    }
    
    keyboard_buttons = []
    for sender_type, count in stats_by_type.items():
        icon = type_icons.get(sender_type, "‚ùì")
        lists_text += f"{icon} {sender_type.value.capitalize()}: {count:,} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"{icon} {sender_type.value.capitalize()} ({count:,})",
                callback_data=f"view_contacts_{sender_type.value}"
            )
        ])
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
    ])
    
    await callback.message.edit_text(
        lists_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "contacts_menu")
@handle_errors
async def back_to_contacts_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await state.clear()
    await contacts_menu(callback.message)