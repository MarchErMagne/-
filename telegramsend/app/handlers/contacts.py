from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, or_
from app.database.database import get_db
from app.database.models import SubscriptionStatus, User, Contact, FileUpload, SenderType
from app.database.models import User, Contact, FileUpload, SenderType, SubscriptionStatus
from app.utils.keyboards import contacts_keyboard, file_type_keyboard, back_keyboard
from app.utils.decorators import handle_errors, log_user_action, subscription_required
from app.utils.validators import parse_contacts_file
from app.config import settings, SUBSCRIPTION_PLANS
import aiofiles
import os
import uuid
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

class ContactStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_manual_contact = State()
    waiting_for_contact_name = State()
    waiting_for_search_query = State()
    waiting_for_tag_name = State()

@router.message(F.text == "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã")
@subscription_required()
@handle_errors
@log_user_action("contacts_menu")
async def contacts_menu(message: types.Message, user: User, db: AsyncSession, **kwargs):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == True
        )
    )
    total_contacts = result.scalar()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    type_stats = {}
    for sender_type in SenderType:
        result = await db.execute(
            select(func.count(Contact.id)).where(
                and_(
                    Contact.user_id == user.id,
                    Contact.type == sender_type,
                    Contact.is_active == True
                )
            )
        )
        type_stats[sender_type] = result.scalar()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    recent_result = await db.execute(
        select(Contact).where(
            and_(
                Contact.user_id == user.id,
                Contact.is_active == True
            )
        )
        .order_by(Contact.created_at.desc())
        .limit(5)
    )
    recent_contacts = recent_result.scalars().all()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    limit = plan["contacts_limit"]
    usage_percent = (total_contacts / limit) * 100 if limit > 0 else 0
    
    contacts_text = (
        f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts:,}/{limit:,} ({usage_percent:.1f}%)\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {len([c for c in recent_contacts if c.created_at.date() == datetime.utcnow().date()])}\n\n"
        f"üìà <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:</b>\n"
    )
    
    type_icons = {
        SenderType.TELEGRAM: "üì±",
        SenderType.EMAIL: "üìß",
        SenderType.WHATSAPP: "üí¨",
        SenderType.SMS: "üìû",
        SenderType.VIBER: "üü£"
    }
    
    for sender_type, icon in type_icons.items():
        count = type_stats.get(sender_type, 0)
        if count > 0:
            contacts_text += f"{icon} {sender_type.value.capitalize()}: {count:,}\n"
    
    if recent_contacts:
        contacts_text += f"\nüìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:</b>\n"
        for contact in recent_contacts[:3]:
            type_icon = type_icons.get(contact.type, "‚ùì")
            identifier = contact.identifier
            if len(identifier) > 20:
                identifier = identifier[:17] + "..."
            contacts_text += f"{type_icon} {identifier}\n"
        
        if len(recent_contacts) > 3:
            contacts_text += f"... –∏ –µ—â–µ {len(recent_contacts) - 3}\n"
    
    contacts_text += "\n"
    
    if total_contacts >= limit:
        contacts_text += f"‚ö†Ô∏è <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤!</b>\n"
        contacts_text += f"–û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞."
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí≥ –£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω", callback_data="subscription_menu")],
                [types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_cleanup")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    else:
        available = limit - total_contacts
        contacts_text += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {available:,}\n"
        contacts_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="contacts_upload"),
                    types.InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="contacts_add_manual")
                ],
                [
                    types.InlineKeyboardButton(text="üìã –ú–æ–∏ —Å–ø–∏—Å–∫–∏", callback_data="contacts_lists"),
                    types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="contacts_search")
                ],
                [
                    types.InlineKeyboardButton(text="üè∑ –¢–µ–≥–∏", callback_data="contacts_tags"),
                    types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∫–∞", callback_data="contacts_cleanup")
                ],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    
    await message.answer(
        contacts_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "contacts_upload")
@subscription_required()
@handle_errors
async def contacts_upload_start(callback: types.CallbackQuery, state: FSMContext, user: User, db: AsyncSession):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == True
        )
    )
    current_contacts = result.scalar()
    
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    if current_contacts >= plan["contacts_limit"]:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
        return
    
    available_slots = plan["contacts_limit"] - current_contacts
    
    await callback.message.edit_text(
        f"üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</b>\n\n"
        f"üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤:</b> {available_slots:,}\n\n"
        f"üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        f"‚Ä¢ .txt (–æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É)\n"
        f"‚Ä¢ .csv (—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)\n"
        f"‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ {settings.MAX_FILE_SIZE // 1024 // 1024}MB\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=file_type_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("file_"))
@handle_errors
async def select_file_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    file_type = callback.data.split("_")[1]
    await state.update_data(file_type=file_type)
    
    type_descriptions = {
        "telegram": "username (@user) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "email": "email –∞–¥—Ä–µ—Å–∞",
        "phone": "–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
    }
    
    format_examples = {
        "telegram": (
            "@username1\n"
            "123456789\n"
            "https://t.me/channel\n"
            "@group_name"
        ),
        "email": (
            "user@example.com\n"
            "test@gmail.com\n"
            "support@company.com"
        ),
        "phone": (
            "+1234567890\n"
            "+79123456789\n"
            "+380123456789"
        )
    }
    
    upload_text = (
        f"üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ {type_descriptions[file_type]}</b>\n\n"
        f"üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        f"‚Ä¢ .txt —Ñ–∞–π–ª—ã (–æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É)\n"
        f"‚Ä¢ .csv —Ñ–∞–π–ª—ã (—Å –∫–æ–ª–æ–Ω–∫–∞–º–∏)\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.MAX_FILE_SIZE // 1024 // 1024}MB\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:</b>\n"
        f"<code>{format_examples[file_type]}</code>\n\n"
        f"üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:</b>"
    )
    
    await callback.message.edit_text(
        upload_text,
        parse_mode="HTML",
        reply_markup=back_keyboard("contacts_upload")
    )
    
    await state.set_state(ContactStates.waiting_for_file)
    await callback.answer()

@router.message(ContactStates.waiting_for_file, F.document)
@handle_errors
async def process_file_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if document.file_size > settings.MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.MAX_FILE_SIZE // 1024 // 1024}MB"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    allowed_extensions = ['.txt', '.csv']
    file_ext = None
    for ext in allowed_extensions:
        if document.file_name.lower().endswith(ext):
            file_ext = ext
            break
    
    if not file_ext:
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .csv —Ñ–∞–π–ª—ã")
        return
    
    data = await state.get_data()
    file_type = data["file_type"]
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await message.answer("üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(document.file_id)
        file_path = os.path.join(settings.UPLOAD_DIR, f"{uuid.uuid4()}{file_ext}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(settings.UPLOAD_DIR, exist_ok=True)
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        await progress_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª...")
        
        # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
            content = await f.read()
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if file_ext == '.csv':
            from app.services.file_parser import FileParser
            valid_contacts, invalid_contacts = FileParser.parse_csv_file(content, file_type)
        else:
            valid_contacts, invalid_contacts = parse_contacts_file(content, file_type)
        
        await progress_msg.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã...")
        
        if not valid_contacts:
            await progress_msg.delete()
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            os.remove(file_path)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        async for db in get_db():
            result = await db.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            result = await db.execute(
                select(func.count(Contact.id)).where(
                    Contact.user_id == user.id,
                    Contact.is_active == True
                )
            )
            current_contacts = result.scalar()
            
            plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
            available_slots = plan["contacts_limit"] - current_contacts
            
            if len(valid_contacts) > available_slots:
                await progress_msg.edit_text(
                    f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ {available_slots} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {len(valid_contacts)}\n"
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–ª–∞–Ω–∞ {user.subscription_plan.capitalize()}"
                )
                valid_contacts = valid_contacts[:available_slots]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_type_map = {
                "telegram": SenderType.TELEGRAM,
                "email": SenderType.EMAIL,
                "phone": SenderType.SMS  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            }
            
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if file_type == "phone":
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(text="üí¨ WhatsApp", callback_data=f"set_phone_type_whatsapp"),
                            types.InlineKeyboardButton(text="üìû SMS", callback_data=f"set_phone_type_sms")
                        ],
                        [types.InlineKeyboardButton(text="üü£ Viber", callback_data=f"set_phone_type_viber")]
                    ]
                )
                
                await state.update_data(
                    valid_contacts=valid_contacts,
                    invalid_contacts=invalid_contacts,
                    file_path=file_path
                )
                
                await progress_msg.edit_text(
                    f"üìû <b>–ù–∞–π–¥–µ–Ω–æ {len(valid_contacts)} –Ω–æ–º–µ—Ä–æ–≤</b>\n\n"
                    f"–î–ª—è –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–æ–º–µ—Ä–∞?",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                return
            
            contact_type = contact_type_map[file_type]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_upload = FileUpload(
                user_id=user.id,
                filename=os.path.basename(file_path),
                original_filename=document.file_name,
                file_size=document.file_size,
                file_type=file_type,
                upload_path=file_path,
                contacts_count=len(valid_contacts)
            )
            
            db.add(file_upload)
            await db.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            new_contacts = 0
            duplicate_contacts = 0
            
            for contact_data in valid_contacts:
                if isinstance(contact_data, dict):
                    contact_id = contact_data['identifier']
                    first_name = contact_data.get('first_name', '')
                    last_name = contact_data.get('last_name', '')
                    metadata = contact_data.get('metadata', {})
                else:
                    contact_id = contact_data
                    first_name = ''
                    last_name = ''
                    metadata = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                result = await db.execute(
                    select(Contact).where(
                        and_(
                            Contact.user_id == user.id,
                            Contact.identifier == contact_id,
                            Contact.type == contact_type
                        )
                    )
                )
                existing_contact = result.scalar_one_or_none()
                
                if existing_contact:
                    duplicate_contacts += 1
                    continue
                
                contact = Contact(
                    user_id=user.id,
                    identifier=contact_id,
                    type=contact_type,
                    first_name=first_name,
                    last_name=last_name,
                    metadata=metadata,
                    is_active=True
                )
                
                db.add(contact)
                new_contacts += 1
            
            await db.commit()
            
            # –û—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ
            result_text = (
                f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {new_contacts:,}\n"
                f"‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {duplicate_contacts:,}\n"
                f"‚Ä¢ –¢–∏–ø: {contact_type.value.capitalize()}\n"
            )
            
            if invalid_contacts:
                result_text += f"‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(invalid_contacts):,}\n"
                
                if len(invalid_contacts) <= 5:
                    result_text += f"\n‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n"
                    for invalid in invalid_contacts:
                        result_text += f"‚Ä¢ {invalid}\n"
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="contacts_lists")],
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="contacts_menu")]
                ]
            )
            
            await progress_msg.delete()
            await message.answer(
                result_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
            except:
                pass
            
            await state.clear()
            logger.info(f"Contacts uploaded: {new_contacts} new contacts for user {user.telegram_id}")
    
    except Exception as e:
        logger.error(f"Error processing file upload: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        
        try:
            os.remove(file_path)
        except:
            pass

@router.callback_query(F.data.startswith("set_phone_type_"))
@handle_errors
async def set_phone_type(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    phone_type = callback.data.split("_")[-1]
    
    type_mapping = {
        "whatsapp": SenderType.WHATSAPP,
        "sms": SenderType.SMS,
        "viber": SenderType.VIBER
    }
    
    contact_type = type_mapping[phone_type]
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        valid_contacts = data["valid_contacts"]
        new_contacts = 0
        duplicate_contacts = 0
        
        for contact_id in valid_contacts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            result = await db.execute(
                select(Contact).where(
                    and_(
                        Contact.user_id == user.id,
                        Contact.identifier == contact_id,
                        Contact.type == contact_type
                    )
                )
            )
            existing_contact = result.scalar_one_or_none()
            
            if existing_contact:
                duplicate_contacts += 1
                continue
            
            contact = Contact(
                user_id=user.id,
                identifier=contact_id,
                type=contact_type,
                is_active=True
            )
            
            db.add(contact)
            new_contacts += 1
        
        await db.commit()
        
        result_text = (
            f"‚úÖ <b>–ù–æ–º–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {phone_type.upper()}!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {new_contacts:,}\n"
            f"‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {duplicate_contacts:,}\n"
        )
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="contacts_menu")]
            ]
        )
        
        await callback.message.edit_text(
            result_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(data.get("file_path", ""))
    except:
        pass
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "contacts_search")
@subscription_required()
@handle_errors
async def contacts_search_start(callback: types.CallbackQuery, state: FSMContext, user: User, db: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ @username - –ø–æ–∏—Å–∫ –ø–æ username\n"
        "‚Ä¢ gmail.com - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω—É email\n"
        "‚Ä¢ +7912 - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É –Ω–æ–º–µ—Ä–∞\n"
        "‚Ä¢ –ò–≤–∞–Ω - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏",
        parse_mode="HTML",
        reply_markup=back_keyboard("contacts_menu")
    )
    
    await state.set_state(ContactStates.waiting_for_search_query)
    await callback.answer()

@router.message(ContactStates.waiting_for_search_query)
@handle_errors
async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        search_result = await db.execute(
            select(Contact).where(
                and_(
                    Contact.user_id == user.id,
                    Contact.is_active == True,
                    or_(
                        Contact.identifier.contains(query),
                        Contact.first_name.contains(query),
                        Contact.last_name.contains(query)
                    )
                )
            ).order_by(Contact.created_at.desc()).limit(20)
        )
        
        contacts = search_result.scalars().all()
        
        if not contacts:
            await message.answer(
                f"üîç <b>–ü–æ–∏—Å–∫: '{query}'</b>\n\n"
                f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                parse_mode="HTML",
                reply_markup=back_keyboard("contacts_menu")
            )
            await state.clear()
            return
        
        search_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'</b>\n\n"
        search_text += f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}\n\n"
        
        type_icons = {
            SenderType.TELEGRAM: "üì±",
            SenderType.EMAIL: "üìß",
            SenderType.WHATSAPP: "üí¨",
            SenderType.SMS: "üìû",
            SenderType.VIBER: "üü£"
        }
        
        for i, contact in enumerate(contacts[:10], 1):
            type_icon = type_icons.get(contact.type, "‚ùì")
            name = ""
            if contact.first_name or contact.last_name:
                name = f" ({contact.first_name} {contact.last_name})".strip()
            
            search_text += f"{i}. {type_icon} {contact.identifier}{name}\n"
        
        if len(contacts) > 10:
            search_text += f"\n... –∏ –µ—â–µ {len(contacts) - 10} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="contacts_search")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="contacts_menu")]
            ]
        )
        
        await message.answer(
            search_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await state.clear()

@router.callback_query(F.data == "contacts_cleanup")
@subscription_required()
@handle_errors
async def contacts_cleanup_start(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == True
        )
    )
    active_contacts = result.scalar()
    
    result = await db.execute(
        select(func.count(Contact.id)).where(
            Contact.user_id == user.id,
            Contact.is_active == False
        )
    )
    inactive_contacts = result.scalar()
    
    cleanup_text = (
        f"üóë <b>–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {active_contacts:,}\n"
        f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {inactive_contacts:,}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard_buttons = []
    
    if inactive_contacts > 0:
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ ({inactive_contacts:,})",
                callback_data="cleanup_inactive"
            )
        ])
    
    if active_contacts > 0:
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã",
                callback_data="cleanup_duplicates"
            )
        ])
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text="‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                callback_data="cleanup_all"
            )
        ])
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
    ])
    
    await callback.message.edit_text(
        cleanup_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "cleanup_duplicates")
@subscription_required()
@handle_errors
async def cleanup_duplicates(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    progress_msg = await callback.message.edit_text("üîç –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...")
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates_result = await db.execute(
        select(
            Contact.identifier,
            Contact.type,
            func.count(Contact.id).label('count'),
            func.min(Contact.id).label('keep_id')
        ).where(
            and_(
                Contact.user_id == user.id,
                Contact.is_active == True
            )
        ).group_by(Contact.identifier, Contact.type).having(func.count(Contact.id) > 1)
    )
    
    duplicates = duplicates_result.all()
    
    if not duplicates:
        await progress_msg.edit_text(
            "‚úÖ <b>–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–í—Å–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã!",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_cleanup")]]
            )
        )
        return
    
    await progress_msg.edit_text("üóë –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...")
    
    deleted_count = 0
    for duplicate in duplicates:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ
        result = await db.execute(
            select(Contact.id).where(
                and_(
                    Contact.user_id == user.id,
                    Contact.identifier == duplicate.identifier,
                    Contact.type == duplicate.type,
                    Contact.id != duplicate.keep_id
                )
            )
        )
        
        ids_to_delete = [row[0] for row in result.all()]
        
        for contact_id in ids_to_delete:
            contact = await db.get(Contact, contact_id)
            if contact:
                await db.delete(contact)
                deleted_count += 1
    
    await db.commit()
    
    await progress_msg.edit_text(
        f"‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {deleted_count:,}\n"
        f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="contacts_menu")]]
        )
    )

# Back handler
@router.callback_query(F.data == "contacts_menu")
@handle_errors
async def back_to_contacts_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await state.clear()
    
    user_id = callback.from_user.id
    
    async for db in get_db():
        from sqlalchemy import select
        result = await db.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
            return
        
        if user.subscription_status != SubscriptionStatus.ACTIVE:
            await callback.answer("üîí –ù—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
            return
        
        await contacts_menu(callback.message, user, db)
    
    await callback.answer()