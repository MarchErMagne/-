from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from app.database.database import get_db
from app.database.models import User, Sender, SenderType
from app.utils.keyboards import sender_type_keyboard, back_keyboard, confirm_keyboard
from app.utils.decorators import handle_errors, log_user_action, subscription_required
from app.utils.validators import validate_email_address, validate_telegram_api_settings, validate_phone_number
from app.config import SUBSCRIPTION_PLANS
import json
import logging

router = Router()
logger = logging.getLogger(__name__)

class SenderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_telegram_api_id = State()
    waiting_for_telegram_api_hash = State()
    waiting_for_telegram_phone = State()
    waiting_for_email_host = State()
    waiting_for_email_port = State()
    waiting_for_email_login = State()
    waiting_for_email_password = State()
    waiting_for_whatsapp_token = State()
    waiting_for_sms_api_key = State()
    waiting_for_viber_api_key = State()

@router.message(F.text == "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏")
@subscription_required()
@handle_errors
@log_user_action("senders_menu")
async def senders_menu(message: types.Message, user: User, db: AsyncSession):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(
        select(func.count(Sender.id)).where(Sender.user_id == user.id)
    )
    senders_count = result.scalar()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    limit = plan["senders_limit"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
    result = await db.execute(
        select(Sender).where(Sender.user_id == user.id).order_by(Sender.created_at.desc())
    )
    senders = result.scalars().all()
    
    senders_text = (
        f"üìß <b>–ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏</b>\n\n"
        f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {senders_count}/{limit}\n\n"
    )
    
    if senders:
        senders_text += "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏:</b>\n\n"
        
        type_icons = {
            SenderType.TELEGRAM: "üì±",
            SenderType.EMAIL: "üìß", 
            SenderType.WHATSAPP: "üí¨",
            SenderType.SMS: "üìû",
            SenderType.VIBER: "üü£"
        }
        
        for sender in senders:
            status_icon = "‚úÖ" if sender.is_verified else "‚ö†Ô∏è"
            type_icon = type_icons.get(sender.type, "‚ùì")
            
            senders_text += (
                f"{type_icon} <b>{sender.name}</b>\n"
                f"   {status_icon} {sender.type.value.capitalize()}\n"
                f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {sender.created_at.strftime('%d.%m.%Y')}\n\n"
            )
    else:
        senders_text += "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π</b>\n\n"
    
    if senders_count < limit:
        senders_text += "‚ûï –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –≤—ã–±—Ä–∞–≤ —Ç–∏–ø –Ω–∏–∂–µ:"
        
        keyboard = sender_type_keyboard()
    else:
        senders_text += f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞ {user.subscription_plan.capitalize()}"
        keyboard = back_keyboard("back_to_menu")
    
    await message.answer(
        senders_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("sender_"))
@subscription_required()
@handle_errors
async def add_sender_type(callback: types.CallbackQuery, state: FSMContext, user: User, db: AsyncSession):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    sender_type = callback.data.split("_")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    result = await db.execute(
        select(func.count(Sender.id)).where(Sender.user_id == user.id)
    )
    senders_count = result.scalar()
    
    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    if senders_count >= plan["senders_limit"]:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π", show_alert=True)
        return
    
    await state.update_data(sender_type=sender_type)
    
    type_names = {
        "telegram": "Telegram",
        "email": "Email",
        "whatsapp": "WhatsApp", 
        "sms": "SMS",
        "viber": "Viber"
    }
    
    type_descriptions = {
        "telegram": "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Telegram –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API ID –∏ API Hash –Ω–∞ my.telegram.org",
        "email": "–î–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω—ã SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
        "whatsapp": "–î–ª—è WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω Twilio API",
        "sms": "–î–ª—è SMS —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
        "viber": "–î–ª—è Viber —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á Viber Business"
    }
    
    setup_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {type_names[sender_type]}</b>\n\n"
        f"üìù {type_descriptions[sender_type]}\n\n"
        f"üí° <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b>\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç', '–ü—Ä–æ–º–æ —Ä–∞—Å—Å—ã–ª–∫–∏' –∏ —Ç.–¥.)"
    )
    
    await callback.message.edit_text(
        setup_text,
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu")
    )
    
    await state.set_state(SenderStates.waiting_for_name)
    await callback.answer()

@router.message(SenderStates.waiting_for_name)
@handle_errors
async def process_sender_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    name = message.text.strip()
    
    if len(name) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return
    
    if len(name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    data = await state.get_data()
    sender_type = data["sender_type"]
    await state.update_data(sender_name=name)
    
    if sender_type == "telegram":
        await message.answer(
            "üì± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org\n"
            "2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "3Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ API ID:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_telegram_api_id)
        
    elif sender_type == "email":
        await message.answer(
            "üìß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ SMTP —Ö–æ—Å—Ç:</b>\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: smtp.gmail.com, smtp.yandex.ru)",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_email_host)
        
    elif sender_type == "whatsapp":
        await message.answer(
            "üí¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WhatsApp –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ twilio.com\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ Auth Token:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_whatsapp_token)
        
    elif sender_type == "sms":
        await message.answer(
            "üìû <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMS –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_sms_api_key)
        
    elif sender_type == "viber":
        await message.answer(
            "üü£ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Viber –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Viber:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_viber_api_key)

@router.message(SenderStates.waiting_for_telegram_api_id)
@handle_errors
async def process_telegram_api_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram API ID"""
    try:
        api_id = int(message.text.strip())
        if api_id <= 0:
            raise ValueError
        
        await state.update_data(api_id=api_id)
        await message.answer(
            "üîê <b>–í–≤–µ–¥–∏—Ç–µ API Hash:</b>\n"
            "(32-—Å–∏–º–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_telegram_api_hash)
        
    except ValueError:
        await message.answer("‚ùå API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

@router.message(SenderStates.waiting_for_telegram_api_hash)
@handle_errors
async def process_telegram_api_hash(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram API Hash"""
    api_hash = message.text.strip()
    
    is_valid, error = validate_telegram_api_settings("123", api_hash)
    if not is_valid and "API Hash" in error:
        await message.answer(f"‚ùå {error}")
        return
    
    await state.update_data(api_hash=api_hash)
    await message.answer(
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
        "(—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)",
        parse_mode="HTML"
    )
    await state.set_state(SenderStates.waiting_for_telegram_phone)

@router.message(SenderStates.waiting_for_telegram_phone)
@handle_errors
async def process_telegram_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Telegram"""
    phone = message.text.strip()
    
    is_valid, clean_phone = validate_phone_number(phone)
    if not is_valid:
        await message.answer(f"‚ùå {clean_phone}")
        return
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        sender_config = {
            "api_id": data["api_id"],
            "api_hash": data["api_hash"],
            "phone": clean_phone
        }
        
        sender = Sender(
            user_id=user.id,
            name=data["sender_name"],
            type=SenderType.TELEGRAM,
            config=sender_config,
            is_active=True,
            is_verified=False
        )
        
        db.add(sender)
        await db.commit()
        
        await message.answer(
            "‚úÖ <b>Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            "‚ö†Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–¥ –∏–∑ SMS\n"
            "–≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML",
            reply_markup=back_keyboard("senders_menu")
        )
        
        await state.clear()
        logger.info(f"Telegram sender added for user {user.telegram_id}")

@router.message(SenderStates.waiting_for_email_host)
@handle_errors
async def process_email_host(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SMTP —Ö–æ—Å—Ç–∞"""
    host = message.text.strip()
    
    if not host:
        await message.answer("‚ùå SMTP —Ö–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    await state.update_data(smtp_host=host)
    await message.answer(
        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ SMTP –ø–æ—Ä—Ç:</b>\n"
        "(–æ–±—ã—á–Ω–æ 587 –¥–ª—è TLS –∏–ª–∏ 465 –¥–ª—è SSL)",
        parse_mode="HTML"
    )
    await state.set_state(SenderStates.waiting_for_email_port)

@router.message(SenderStates.waiting_for_email_port)
@handle_errors
async def process_email_port(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SMTP –ø–æ—Ä—Ç–∞"""
    try:
        port = int(message.text.strip())
        if port < 1 or port > 65535:
            raise ValueError
        
        await state.update_data(smtp_port=port)
        await message.answer(
            "üìß <b>–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_email_login)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535")

@router.message(SenderStates.waiting_for_email_login)
@handle_errors
async def process_email_login(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –ª–æ–≥–∏–Ω–∞"""
    email = message.text.strip()
    
    is_valid, clean_email = validate_email_address(email)
    if not is_valid:
        await message.answer(f"‚ùå {clean_email}")
        return
    
    await state.update_data(email=clean_email)
    await message.answer(
        "üîê <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>\n"
        "(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å App Password)",
        parse_mode="HTML"
    )
    await state.set_state(SenderStates.waiting_for_email_password)

@router.message(SenderStates.waiting_for_email_password)
@handle_errors
async def process_email_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –ø–∞—Ä–æ–ª—è"""
    password = message.text.strip()
    
    if not password:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        sender_config = {
            "smtp_host": data["smtp_host"],
            "smtp_port": data["smtp_port"],
            "email": data["email"],
            "password": password,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å!
            "use_tls": True
        }
        
        sender = Sender(
            user_id=user.id,
            name=data["sender_name"],
            type=SenderType.EMAIL,
            config=sender_config,
            is_active=True,
            is_verified=False
        )
        
        db.add(sender)
        await db.commit()
        
        await message.answer(
            "‚úÖ <b>Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ",
            parse_mode="HTML",
            reply_markup=back_keyboard("senders_menu")
        )
        
        await state.clear()
        logger.info(f"Email sender added for user {user.telegram_id}")

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è WhatsApp, SMS –∏ Viber
@router.callback_query(F.data == "senders_menu")
@handle_errors
async def back_to_senders_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π"""
    await state.clear()
    await senders_menu(callback.message)