from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.database.database import get_db
from app.database.models import User, Payment, Subscription, SubscriptionStatus
from app.utils.keyboards import subscription_keyboard, back_keyboard, confirm_keyboard
from app.utils.decorators import handle_errors, log_user_action
from app.services.crypto_pay import CryptoPay
from app.config import SUBSCRIPTION_PLANS
from datetime import datetime, timedelta
import uuid
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
@handle_errors
@log_user_action("subscription_menu")
async def subscription_menu(message: types.Message):
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        subscription_text = "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        
        if user.subscription_status == SubscriptionStatus.ACTIVE and user.subscription_expires:
            days_left = (user.subscription_expires - datetime.utcnow()).days
            subscription_text += (
                f"‚úÖ <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {user.subscription_plan.capitalize()}\n"
                f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n\n"
            )
            
            if days_left <= 7:
                subscription_text += "‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç! –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.</b>\n\n"
        else:
            subscription_text += "‚ùå <b>–ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç</b>\n\n"
        
        subscription_text += "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
        
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            price_usd = plan["price"] / 100
            subscription_text += (
                f"üíº <b>{plan['name']}</b> - ${price_usd:.2f}/–º–µ—Å\n"
                f"üìä –õ–∏–º–∏—Ç—ã: {plan['senders_limit']} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, {plan['contacts_limit']:,} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
            )
            for feature in plan["features"]:
                subscription_text += f"  ‚úì {feature}\n"
            subscription_text += "\n"
        
        await message.answer(
            subscription_text,
            parse_mode="HTML",
            reply_markup=subscription_keyboard()
        )

@router.callback_query(F.data.startswith("subscribe_"))
@handle_errors
@log_user_action("subscribe_plan")
async def subscribe_plan(callback: types.CallbackQuery):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    plan_id = callback.data.split("_")[1]
    
    if plan_id not in SUBSCRIPTION_PLANS:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return
    
    plan = SUBSCRIPTION_PLANS[plan_id]
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            user_id=user.id,
            invoice_id=str(uuid.uuid4()),
            amount=plan["price"],
            currency="USD",
            status="pending",
            plan=plan_id
        )
        
        db.add(payment)
        await db.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoPay
        crypto_pay = CryptoPay()
        try:
            invoice = await crypto_pay.create_invoice(
                amount=plan["price"] / 100,  # CryptoPay –ø—Ä–∏–Ω–∏–º–∞–µ—Ç USD
                currency="USD",
                description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan['name']} –Ω–∞ 30 –¥–Ω–µ–π",
                payload=payment.invoice_id
            )

            payment.crypto_pay_id = str(invoice["invoice_id"])
            await db.commit()
            
            price_usd = plan["price"] / 100
            payment_text = (
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {plan['name']}</b>\n\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${price_usd:.2f}\n"
                f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> 30 –¥–Ω–µ–π\n\n"
                f"üîí <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>\n"
            )
            
            for feature in plan["features"]:
                payment_text += f"‚úì {feature}\n"
            
            payment_text += (
                f"\nüì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoPay\n"
                f"üíé –ü—Ä–∏–Ω–∏–º–∞–µ–º: BTC, ETH, USDT, TON –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
            )
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                        url=invoice["pay_url"]
                    )],
                    [types.InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data=f"check_payment_{payment.invoice_id}"
                    )],
                    [types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="subscription_menu"
                    )]
                ]
            )
            
            await callback.message.edit_text(
                payment_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error creating invoice: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("check_payment_"))
@handle_errors
async def check_payment(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    invoice_id = callback.data.split("_", 2)[2]
    
    async for db in get_db():
        result = await db.execute(
            select(Payment).where(Payment.invoice_id == invoice_id)
        )
        payment = result.scalar_one_or_none()
        
        if not payment:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ CryptoPay
        crypto_pay = CryptoPay()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ
            invoices = await crypto_pay.get_invoices(invoice_ids=payment.crypto_pay_id)
            
            if not invoices or len(invoices) == 0:
                await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CryptoPay", show_alert=True)
                return
                
            invoice_data = invoices[0]
            
            if invoice_data.get("status") == "paid":
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                payment.status = "paid"
                payment.paid_at = datetime.utcnow()
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                user = await db.get(User, payment.user_id)
                plan = SUBSCRIPTION_PLANS[payment.plan]
                
                user.subscription_plan = payment.plan
                user.subscription_status = SubscriptionStatus.ACTIVE
                user.subscription_expires = datetime.utcnow() + timedelta(days=plan["duration_days"])
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏
                subscription = Subscription(
                    user_id=user.id,
                    plan=payment.plan,
                    status=SubscriptionStatus.ACTIVE,
                    expires_at=user.subscription_expires
                )
                
                db.add(subscription)
                await db.commit()
                
                success_text = (
                    f"üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞\n"
                    f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üéØ <b>–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                )
                
                for feature in plan["features"]:
                    success_text += f"‚úì {feature}\n"
                
                success_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞! üöÄ"
                
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ]
                )
                
                await callback.message.edit_text(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                
                logger.info(f"Subscription activated for user {user.telegram_id}, plan: {payment.plan}")
                
            elif invoice_data.get("status") == "expired":
                payment.status = "expired"
                await db.commit()
                await callback.answer("–ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.", show_alert=True)
                
            else:
                await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"Error checking payment: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "subscription_menu")
@handle_errors
async def back_to_subscription(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        subscription_text = "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        
        if user.subscription_status == SubscriptionStatus.ACTIVE and user.subscription_expires:
            days_left = (user.subscription_expires - datetime.utcnow()).days
            subscription_text += (
                f"‚úÖ <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {user.subscription_plan.capitalize()}\n"
                f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n\n"
            )
            
            if days_left <= 7:
                subscription_text += "‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç! –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.</b>\n\n"
        else:
            subscription_text += "‚ùå <b>–ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç</b>\n\n"
        
        subscription_text += "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
        
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            price_usd = plan["price"] / 100
            subscription_text += (
                f"üíº <b>{plan['name']}</b> - ${price_usd:.2f}/–º–µ—Å\n"
                f"üìä –õ–∏–º–∏—Ç—ã: {plan['senders_limit']} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, {plan['contacts_limit']:,} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
            )
            for feature in plan["features"]:
                subscription_text += f"  ‚úì {feature}\n"
            subscription_text += "\n"
        
        await callback.message.edit_text(
            subscription_text,
            parse_mode="HTML",
            reply_markup=subscription_keyboard()
        )