from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, desc
from app.database.database import get_db
from app.database.models import User, Campaign, CampaignLog, Contact, SenderType, CampaignStatus
from app.database.models import User, Campaign, CampaignLog, Contact, SenderType, CampaignStatus, SubscriptionStatus
from datetime import datetime, timedelta
from app.utils.keyboards import analytics_keyboard, back_keyboard
from app.utils.decorators import handle_errors, log_user_action, subscription_required
from datetime import datetime, timedelta
import io
import csv
import json
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
@subscription_required()
@handle_errors
@log_user_action("analytics_menu")
async def analytics_menu(message: types.Message, user: User, db: AsyncSession):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    campaigns_result = await db.execute(
        select(func.count(Campaign.id)).where(Campaign.user_id == user.id)
    )
    total_campaigns = campaigns_result.scalar()
    
    contacts_result = await db.execute(
        select(func.count(Contact.id)).where(
            and_(Contact.user_id == user.id, Contact.is_active == True)
        )
    )
    total_contacts = contacts_result.scalar()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    thirty_days_ago = datetime.utcnow() - timedelta(days=30)
    
    recent_campaigns_result = await db.execute(
        select(func.count(Campaign.id)).where(
            and_(
                Campaign.user_id == user.id,
                Campaign.created_at >= thirty_days_ago
            )
        )
    )
    recent_campaigns = recent_campaigns_result.scalar()
    
    # –£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞ 30 –¥–Ω–µ–π
    sent_result = await db.execute(
        select(func.sum(Campaign.sent_count)).where(
            and_(
                Campaign.user_id == user.id,
                Campaign.started_at >= thirty_days_ago
            )
        )
    )
    total_sent = sent_result.scalar() or 0
    
    # –ù–µ—É–¥–∞—á–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞ 30 –¥–Ω–µ–π
    failed_result = await db.execute(
        select(func.sum(Campaign.failed_count)).where(
            and_(
                Campaign.user_id == user.id,
                Campaign.started_at >= thirty_days_ago
            )
        )
    )
    total_failed = failed_result.scalar() or 0
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success_rate = 0
    if total_sent + total_failed > 0:
        success_rate = (total_sent / (total_sent + total_failed)) * 100
    
    analytics_text = (
        f"üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts:,}\n\n"
        f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>\n"
        f"‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ: {recent_campaigns}\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent:,}\n"
        f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {total_failed:,}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:"
    )
    
    await message.answer(
        analytics_text,
        parse_mode="HTML",
        reply_markup=analytics_keyboard()
    )

@router.callback_query(F.data == "analytics_general")
@subscription_required()
@handle_errors
async def analytics_general(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–∞–º–ø–∞–Ω–∏–π
    type_stats = {}
    for sender_type in SenderType:
        campaigns_result = await db.execute(
            select(func.count(Campaign.id)).where(
                and_(
                    Campaign.user_id == user.id,
                    Campaign.type == sender_type
                )
            )
        )
        campaigns_count = campaigns_result.scalar()
        
        sent_result = await db.execute(
            select(func.sum(Campaign.sent_count)).where(
                and_(
                    Campaign.user_id == user.id,
                    Campaign.type == sender_type
                )
            )
        )
        sent_count = sent_result.scalar() or 0
        
        if campaigns_count > 0:
            type_stats[sender_type] = {
                'campaigns': campaigns_count,
                'sent': sent_count
            }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_stats = {}
    for status in CampaignStatus:
        result = await db.execute(
            select(func.count(Campaign.id)).where(
                and_(
                    Campaign.user_id == user.id,
                    Campaign.status == status
                )
            )
        )
        count = result.scalar()
        if count > 0:
            status_stats[status] = count
    
    general_text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    if type_stats:
        general_text += "<b>–ü–æ —Ç–∏–ø–∞–º —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n"
        type_icons = {
            SenderType.TELEGRAM: "üì±",
            SenderType.EMAIL: "üìß",
            SenderType.WHATSAPP: "üí¨",
            SenderType.SMS: "üìû",
            SenderType.VIBER: "üü£"
        }
        
        for sender_type, stats in type_stats.items():
            icon = type_icons.get(sender_type, "‚ùì")
            general_text += f"{icon} {sender_type.value.capitalize()}: {stats['campaigns']} –∫–∞–º–ø–∞–Ω–∏–π, {stats['sent']:,} –æ—Ç–ø—Ä–∞–≤–æ–∫\n"
        
        general_text += "\n"
    
    if status_stats:
        general_text += "<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º –∫–∞–º–ø–∞–Ω–∏–π:</b>\n"
        status_icons = {
            CampaignStatus.COMPLETED: "‚úÖ",
            CampaignStatus.RUNNING: "üîÑ",
            CampaignStatus.DRAFT: "üìù",
            CampaignStatus.PAUSED: "‚è∏",
            CampaignStatus.FAILED: "‚ùå"
        }
        
        for status, count in status_stats.items():
            icon = status_icons.get(status, "‚ùì")
            general_text += f"{icon} {status.value.capitalize()}: {count}\n"
    
    await callback.message.edit_text(
        general_text,
        parse_mode="HTML",
        reply_markup=back_keyboard("analytics_menu")
    )
    await callback.answer()

@router.callback_query(F.data == "analytics_campaigns")
@subscription_required()
@handle_errors
async def analytics_campaigns(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º"""
    
    # –¢–æ–ø 5 —Å–∞–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
    result = await db.execute(
        select(Campaign).where(Campaign.user_id == user.id)
        .order_by(desc(Campaign.sent_count))
        .limit(5)
    )
    top_campaigns = result.scalars().all()
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
    result = await db.execute(
        select(Campaign).where(Campaign.user_id == user.id)
        .order_by(desc(Campaign.created_at))
        .limit(5)
    )
    recent_campaigns = result.scalars().all()
    
    campaigns_text = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π</b>\n\n"
    
    if top_campaigns:
        campaigns_text += "<b>üèÜ –¢–æ–ø-5 –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–∞–º:</b>\n"
        for i, campaign in enumerate(top_campaigns, 1):
            success_rate = 0
            if campaign.total_contacts > 0:
                success_rate = (campaign.sent_count / campaign.total_contacts) * 100
            
            campaigns_text += (
                f"{i}. {campaign.name}\n"
                f"   üì§ {campaign.sent_count:,} –æ—Ç–ø—Ä–∞–≤–æ–∫ ({success_rate:.1f}%)\n"
                f"   üìÖ {campaign.created_at.strftime('%d.%m.%Y')}\n\n"
            )
    
    if recent_campaigns:
        campaigns_text += "<b>üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:</b>\n"
        
        status_icons = {
            CampaignStatus.COMPLETED: "‚úÖ",
            CampaignStatus.RUNNING: "üîÑ", 
            CampaignStatus.DRAFT: "üìù",
            CampaignStatus.PAUSED: "‚è∏",
            CampaignStatus.FAILED: "‚ùå"
        }
        
        for campaign in recent_campaigns:
            status_icon = status_icons.get(campaign.status, "‚ùì")
            campaigns_text += (
                f"{status_icon} {campaign.name}\n"
                f"   üìä {campaign.sent_count}/{campaign.total_contacts or 0}\n"
                f"   üìÖ {campaign.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
    
    if not top_campaigns and not recent_campaigns:
        campaigns_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    await callback.message.edit_text(
        campaigns_text,
        parse_mode="HTML",
        reply_markup=back_keyboard("analytics_menu")
    )
    await callback.answer()

@router.callback_query(F.data == "analytics_contacts")
@subscription_required()
@handle_errors
async def analytics_contacts(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    type_stats = {}
    for sender_type in SenderType:
        result = await db.execute(
            select(func.count(Contact.id)).where(
                and_(
                    Contact.user_id == user.id,
                    Contact.type == sender_type,
                    Contact.is_active == True
                )
            )
        )
        count = result.scalar()
        if count > 0:
            type_stats[sender_type] = count
    
    # –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    recent_result = await db.execute(
        select(func.count(Contact.id)).where(
            and_(
                Contact.user_id == user.id,
                Contact.created_at >= datetime.utcnow() - timedelta(days=7),
                Contact.is_active == True
            )
        )
    )
    recent_contacts = recent_result.scalar()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total_result = await db.execute(
        select(func.count(Contact.id)).where(
            and_(Contact.user_id == user.id, Contact.is_active == True)
        )
    )
    total_contacts = total_result.scalar()
    
    contacts_text = (
        f"üë• <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_contacts:,}\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_contacts:,}\n\n"
    )
    
    if type_stats:
        contacts_text += "<b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
        type_icons = {
            SenderType.TELEGRAM: "üì±",
            SenderType.EMAIL: "üìß",
            SenderType.WHATSAPP: "üí¨", 
            SenderType.SMS: "üìû",
            SenderType.VIBER: "üü£"
        }
        
        for sender_type, count in type_stats.items():
            icon = type_icons.get(sender_type, "‚ùì")
            percentage = (count / total_contacts) * 100 if total_contacts > 0 else 0
            contacts_text += f"{icon} {sender_type.value.capitalize()}: {count:,} ({percentage:.1f}%)\n"
    else:
        contacts_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
    
    await callback.message.edit_text(
        contacts_text,
        parse_mode="HTML",
        reply_markup=back_keyboard("analytics_menu")
    )
    await callback.answer()

@router.callback_query(F.data == "analytics_export")
@subscription_required(["pro", "premium"])
@handle_errors
async def analytics_export(callback: types.CallbackQuery, user: User, db: AsyncSession):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        campaigns_result = await db.execute(
            select(Campaign).where(Campaign.user_id == user.id)
            .order_by(desc(Campaign.created_at))
        )
        campaigns = campaigns_result.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º CSV –æ—Ç—á–µ—Ç
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏',
            '–¢–∏–ø',
            '–°—Ç–∞—Ç—É—Å', 
            '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            '–û—à–∏–±–æ–∫',
            '–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
            '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
            '–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞',
            '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'
        ])
        
        # –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π
        for campaign in campaigns:
            success_rate = 0
            if campaign.total_contacts > 0:
                success_rate = (campaign.sent_count / campaign.total_contacts) * 100
            
            writer.writerow([
                campaign.name,
                campaign.type.value,
                campaign.status.value,
                campaign.sent_count,
                campaign.failed_count,
                campaign.total_contacts or 0,
                f"{success_rate:.1f}",
                campaign.created_at.strftime('%d.%m.%Y %H:%M'),
                campaign.started_at.strftime('%d.%m.%Y %H:%M') if campaign.started_at else '',
                campaign.completed_at.strftime('%d.%m.%Y %H:%M') if campaign.completed_at else ''
            ])
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        csv_data = output.getvalue().encode('utf-8')
        output.close()
        
        file = types.BufferedInputFile(
            csv_data,
            filename=f"analytics_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        )
        
        await callback.message.answer_document(
            document=file,
            caption=(
                f"üìã <b>–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ</b>\n\n"
                f"üìä –ö–∞–º–ø–∞–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–µ: {len(campaigns)}\n"
                f"üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            ),
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        logger.error(f"Error exporting analytics: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞", show_alert=True)

@router.callback_query(F.data == "analytics_menu")
@handle_errors
async def back_to_analytics_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    fake_message = callback.message
    fake_message.from_user = callback.from_user
    
    await analytics_menu(fake_message)
    await callback.answer()



@router.callback_query(F.data == "analytics_menu")
@handle_errors
async def back_to_analytics_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await analytics_menu(callback.message)