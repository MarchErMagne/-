#!/bin/bash

# –ü–æ–ª–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç TelegramSender Pro

set -e

echo "üöÄ TelegramSender Pro Installation Script"
echo "========================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    echo "üîç Checking system requirements..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "‚úÖ Linux detected"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "‚úÖ macOS detected"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        echo "‚úÖ Windows detected"
    else
        echo "‚ö†Ô∏è  Unknown OS: $OSTYPE"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker is not installed!"
        echo "üì• Please install Docker first:"
        echo "   https://docs.docker.com/get-docker/"
        exit 1
    else
        echo "‚úÖ Docker found: $(docker --version)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose is not installed!"
        echo "üì• Please install Docker Compose first:"
        echo "   https://docs.docker.com/compose/install/"
        exit 1
    else
        echo "‚úÖ Docker Compose found: $(docker-compose --version)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    available_space=$(df . | awk 'NR==2 {print $4}')
    if [[ $available_space -lt 5000000 ]]; then
        echo "‚ö†Ô∏è  Low disk space. Recommended: 5GB+ available"
    else
        echo "‚úÖ Sufficient disk space"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup_project() {
    echo ""
    echo "üìÅ Setting up project structure..."
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p uploads logs scripts
    
    # –°–æ–∑–¥–∞–µ–º .gitkeep —Ñ–∞–π–ª—ã
    touch uploads/.gitkeep logs/.gitkeep
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
    chmod 755 uploads logs scripts
    
    echo "‚úÖ Project structure created"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    echo ""
    echo "‚öôÔ∏è  Setting up configuration..."
    
    if [[ ! -f .env ]]; then
        if [[ -f .env.example ]]; then
            cp .env.example .env
            echo "‚úÖ Created .env from .env.example"
        else
            echo "‚ùå .env.example not found!"
            return 1
        fi
    else
        echo "‚úÖ .env file already exists"
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è .env
    chmod 600 .env
    
    echo ""
    echo "üìù IMPORTANT: Please edit .env file with your configuration!"
    echo "   Required variables:"
    echo "   - BOT_TOKEN (from @BotFather)"
    echo "   - BOT_USERNAME (your bot username)"
    echo "   - CRYPTO_PAY_TOKEN (from @CryptoBot)"
    echo ""
    
    read -p "Press Enter to continue after editing .env file..."
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
validate_config() {
    echo ""
    echo "üîç Validating configuration..."
    
    if [[ -f scripts/validate_env.py ]]; then
        if python3 scripts/validate_env.py; then
            echo "‚úÖ Configuration validation passed"
        else
            echo "‚ùå Configuration validation failed!"
            echo "Please check your .env file and try again"
            exit 1
        fi
    else
        echo "‚ö†Ô∏è  Validation script not found, skipping..."
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    echo ""
    echo "üê≥ Starting Docker services..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo "Stopping existing containers..."
    docker-compose down 2>/dev/null || true
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    echo "Building Docker images..."
    docker-compose build
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis
    echo "Starting database and Redis..."
    docker-compose up -d postgres redis
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
    echo "Waiting for database to be ready..."
    for i in {1..30}; do
        if docker-compose exec postgres pg_isready -U postgres -d telegram_sender &>/dev/null; then
            echo "‚úÖ Database is ready"
            break
        fi
        echo "Waiting... ($i/30)"
        sleep 2
    done
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    echo "Applying database migrations..."
    docker-compose run --rm bot alembic upgrade head
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    echo "Starting all services..."
    docker-compose up -d
    
    echo "‚úÖ All services started!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
verify_installation() {
    echo ""
    echo "üîç Verifying installation..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "Container status:"
    docker-compose ps
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
    echo ""
    echo "Checking health endpoint..."
    if curl -s http://localhost:8001/health &>/dev/null; then
        echo "‚úÖ Health check passed"
    else
        echo "‚ö†Ô∏è  Health check failed, but services might still be starting..."
    fi
}

# –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
show_final_instructions() {
    echo ""
    echo "üéâ Installation completed!"
    echo "========================"
    echo ""
    echo "üì± Your bot should now be running!"
    echo ""
    echo "üîß Next steps:"
    echo "1. Find your bot in Telegram by username: @$(grep BOT_USERNAME .env | cut -d'=' -f2)"
    echo "2. Send /start to begin setup"
    echo "3. Configure senders in bot menu"
    echo "4. Upload contacts and create campaigns"
    echo ""
    echo "üìä Management commands:"
    echo "  View logs:    docker-compose logs -f bot"
    echo "  Restart:      docker-compose restart"
    echo "  Stop:         docker-compose down"
    echo "  Update:       git pull && docker-compose build && docker-compose up -d"
    echo ""
    echo "üìö Documentation:"
    echo "  Full guide:   cat INSTALLATION_GUIDE.md"
    echo "  Quick start:  cat QUICK_START.md"
    echo ""
    echo "üÜò Support:"
    echo "  Issues:       https://github.com/your-repo/telegram-sender-pro/issues"
    echo "  Logs:         docker-compose logs"
    echo ""
    echo "Happy sending! üöÄ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    check_system
    setup_project
    setup_config
    validate_config
    start_services
    verify_installation
    show_final_instructions
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    echo ""
    echo "‚ùå Installation failed!"
    echo "Check the error messages above and try again."
    echo "For support, visit: https://github.com/your-repo/telegram-sender-pro/issues"
    exit 1
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
trap handle_error ERR

# –ó–∞–ø—É—Å–∫
main "$@"