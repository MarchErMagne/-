from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.services.ai_assistant import AIAssistant
from app.database.models import SubscriptionStatus
from app.utils.keyboards import ai_assistant_keyboard, back_keyboard
from app.utils.decorators import handle_errors, log_user_action, subscription_required
import logging

router = Router()
logger = logging.getLogger(__name__)

class AIStates(StatesGroup):
    waiting_for_topic = State()
    waiting_for_text_to_check = State()
    waiting_for_cta_to_improve = State()
    waiting_for_ab_text = State()

@router.message(F.text == "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
@subscription_required(["pro", "premium"])
@handle_errors
@log_user_action("ai_assistant_menu")
async def ai_assistant_menu(message: types.Message, **kwargs):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    ai = AIAssistant()
    
    if not ai.is_available():
        await message.answer(
            "‚ùå <b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å DeepSeek API –∫–ª—é—á.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_menu")
        )
        return
    
    ai_text = (
        "ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n"
        "–í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫\n"
        "‚Ä¢ üõ° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ üéØ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n"
        "‚Ä¢ üîÑ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
    )
    
    await message.answer(
        ai_text,
        parse_mode="HTML",
        reply_markup=ai_assistant_keyboard()
    )

@router.callback_query(F.data == "ai_assistant_menu")
@handle_errors
async def back_to_ai_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await state.clear()
    
    ai = AIAssistant()
    
    if not ai.is_available():
        await callback.message.edit_text(
            "‚ùå <b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å DeepSeek API –∫–ª—é—á.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_menu")
        )
        return
    
    ai_text = (
        "ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n"
        "–í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫\n"
        "‚Ä¢ üõ° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ üéØ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n"
        "‚Ä¢ üîÑ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
    )
    
    await callback.message.edit_text(
        ai_text,
        parse_mode="HTML",
        reply_markup=ai_assistant_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "ai_generate")
@handle_errors
async def ai_generate_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    await callback.message.edit_text(
        "‚úçÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ê–∫—Ü–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π 50%\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É\n"
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º",
        parse_mode="HTML",
        reply_markup=back_keyboard("ai_assistant_menu")
    )
    
    await state.set_state(AIStates.waiting_for_topic)
    await callback.answer()

@router.message(AIStates.waiting_for_topic)
@handle_errors
async def ai_generate_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    topic = message.text.strip()
    
    if len(topic) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
    
    ai = AIAssistant()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    result = await ai.generate_message(
        topic=topic,
        target_audience="–ø–æ–¥–ø–∏—Å—á–∏–∫–∏",
        tone="–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        message_type="—Ä–µ–∫–ª–∞–º–Ω–æ–µ",
        platform="telegram"
    )
    
    await loading_msg.delete()
    
    if result["success"]:
        data = result["result"]
        
        generated_text = (
            f"‚úÖ <b>–¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üìù <b>–¢–µ–º–∞:</b> {data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}\n\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{data.get('message', '')}\n\n"
            f"üéØ <b>–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:</b>\n{data.get('cta', '')}\n\n"
            f"üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        )
        
        for tip in data.get('tips', []):
            generated_text += f"‚Ä¢ {tip}\n"
        
        generated_text += f"\nüìä –î–ª–∏–Ω–∞: {result['length']}/{result['max_length']} —Å–∏–º–≤–æ–ª–æ–≤"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="ai_generate")],
                [types.InlineKeyboardButton(text="üõ° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–ø–∞–º", callback_data="check_generated_spam")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_assistant_menu")]
            ]
        )
        
        await state.update_data(last_generated_text=data.get('message', ''))
        
    else:
        generated_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n{result['error']}"
        keyboard = back_keyboard("ai_assistant_menu")
    
    await message.answer(
        generated_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.clear()

@router.callback_query(F.data == "ai_spam_check")
@handle_errors
async def ai_spam_check_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º"""
    
    await callback.message.edit_text(
        "üõ° <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
        "üìã –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç:\n"
        "‚Ä¢ –°–ø–∞–º-—Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã\n"
        "‚Ä¢ –ò–∑–±—ã—Ç–æ–∫ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤\n"
        "‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∞–º",
        parse_mode="HTML",
        reply_markup=back_keyboard("ai_assistant_menu")
    )
    
    await state.set_state(AIStates.waiting_for_text_to_check)
    await callback.answer()

@router.message(AIStates.waiting_for_text_to_check)
@handle_errors
async def ai_spam_check_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º"""
    
    text = message.text.strip()
    
    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    loading_msg = await message.answer("üõ° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞ —Å–ø–∞–º...")
    
    ai = AIAssistant()
    result = await ai.check_spam_score(text, "email")
    
    await loading_msg.delete()
    
    if result["success"]:
        data = result["result"]
        spam_score = data.get("spam_score", 0)
        risk_level = data.get("risk_level", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ä–∏—Å–∫–∞
        if spam_score <= 3:
            risk_icon = "üü¢"
        elif spam_score <= 6:
            risk_icon = "üü°"
        else:
            risk_icon = "üî¥"
        
        spam_text = (
            f"üõ° <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Å–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"{risk_icon} <b>–û—Ü–µ–Ω–∫–∞ —Å–ø–∞–º–∞:</b> {spam_score}/10\n"
            f"üìä <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level}\n\n"
        )
        
        if data.get("issues"):
            spam_text += "<b>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
            for issue in data["issues"]:
                spam_text += f"‚Ä¢ {issue}\n"
            spam_text += "\n"
        
        if data.get("suggestions"):
            spam_text += "<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for suggestion in data["suggestions"]:
                spam_text += f"‚Ä¢ {suggestion}\n"
            spam_text += "\n"
        
        if data.get("spam_words"):
            spam_text += "<b>üö´ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–∞–º-—Å–ª–æ–≤–∞:</b>\n"
            spam_text += ", ".join(data["spam_words"])
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç", callback_data="ai_spam_check")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_assistant_menu")]
            ]
        )
        
    else:
        spam_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:</b>\n{result['error']}"
        keyboard = back_keyboard("ai_assistant_menu")
    
    await message.answer(
        spam_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.clear()

@router.callback_query(F.data == "ai_improve_cta")
@handle_errors
async def ai_improve_cta_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏—è CTA"""
    
    await callback.message.edit_text(
        "üéØ <b>–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (CTA):\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã CTA:</b>\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ\n"
        "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "‚Ä¢ –°–∫–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø—Ä–µ–¥–ª–æ–∂—É —É–ª—É—á—à–µ–Ω–∏—è!",
        parse_mode="HTML",
        reply_markup=back_keyboard("ai_assistant_menu")
    )
    
    await state.set_state(AIStates.waiting_for_cta_to_improve)
    await callback.answer()

@router.message(AIStates.waiting_for_cta_to_improve)
@handle_errors
async def ai_improve_cta_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è CTA"""
    
    cta = message.text.strip()
    
    if len(cta) < 3:
        await message.answer("‚ùå CTA —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return
    
    loading_msg = await message.answer("üéØ –£–ª—É—á—à–∞—é –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é...")
    
    ai = AIAssistant()
    result = await ai.improve_cta(cta, "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
    
    await loading_msg.delete()
    
    if result["success"]:
        data = result["result"]
        
        cta_text = (
            f"üéØ <b>–£–ª—É—á—à–µ–Ω–∏–µ CTA –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
            f"üìù <b>–ò—Å—Ö–æ–¥–Ω—ã–π CTA:</b>\n{result['original_cta']}\n\n"
            f"‚ú® <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π CTA:</b>\n{data.get('improved_cta', '')}\n\n"
            f"üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n{data.get('explanation', '')}\n\n"
        )
        
        if data.get("alternatives"):
            cta_text += "<b>üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
            for i, alt in enumerate(data["alternatives"], 1):
                cta_text += f"{i}. {alt}\n"
            cta_text += "\n"
        
        if data.get("tips"):
            cta_text += "<b>üìö –°–æ–≤–µ—Ç—ã:</b>\n"
            for tip in data["tips"]:
                cta_text += f"‚Ä¢ {tip}\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –£–ª—É—á—à–∏—Ç—å –¥—Ä—É–≥–æ–π CTA", callback_data="ai_improve_cta")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_assistant_menu")]
            ]
        )
        
    else:
        cta_text = f"‚ùå <b>–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è:</b>\n{result['error']}"
        keyboard = back_keyboard("ai_assistant_menu")
    
    await message.answer(
        cta_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.clear()

@router.callback_query(F.data == "ai_ab_test")
@handle_errors
async def ai_ab_test_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    await callback.message.edit_text(
        "üîÑ <b>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        "üìä <b>–ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b>\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏\n"
        "‚Ä¢ –†–∞–∑–ª–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã\n"
        "‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ CTA",
        parse_mode="HTML",
        reply_markup=back_keyboard("ai_assistant_menu")
    )
    
    await state.set_state(AIStates.waiting_for_ab_text)
    await callback.answer()

@router.message(AIStates.waiting_for_ab_text)
@handle_errors
async def ai_ab_test_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    text = message.text.strip()
    
    if len(text) < 20:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    loading_msg = await message.answer("üîÑ –°–æ–∑–¥–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    ai = AIAssistant()
    result = await ai.generate_ab_variants(text, 3)
    
    await loading_msg.delete()
    
    if result["success"]:
        data = result["result"]
        
        ab_text = (
            f"üîÑ <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üìù <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{text[:100]}{'...' if len(text) > 100 else ''}\n\n"
        )
        
        for i, variant in enumerate(data.get("variants", []), 1):
            ab_text += (
                f"<b>üÖ∞Ô∏è {variant.get('name', f'–í–∞—Ä–∏–∞–Ω—Ç {i}')}:</b>\n"
                f"üìã –§–æ–∫—É—Å: {variant.get('focus', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí¨ –¢–µ–∫—Å—Ç: {variant.get('text', '')[:200]}{'...' if len(variant.get('text', '')) > 200 else ''}\n\n"
            )
        
        if data.get("testing_tips"):
            ab_text += "<b>üìä –°–æ–≤–µ—Ç—ã –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:</b>\n"
            for tip in data["testing_tips"]:
                ab_text += f"‚Ä¢ {tip}\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="ai_ab_test")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_assistant_menu")]
            ]
        )
        
    else:
        ab_text = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b>\n{result['error']}"
        keyboard = back_keyboard("ai_assistant_menu")
    
    await message.answer(
        ab_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.clear()

@router.callback_query(F.data == "check_generated_spam")
@handle_errors
async def check_generated_spam(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ø–∞–º"""
    
    data = await state.get_data()
    text = data.get("last_generated_text")
    
    if not text:
        await callback.answer("‚ùå –ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)
        return
    
    loading_msg = await callback.message.edit_text("üõ° –ü—Ä–æ–≤–µ—Ä—è—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∞–º...")
    
    ai = AIAssistant()
    result = await ai.check_spam_score(text, "telegram")
    
    if result["success"]:
        data = result["result"]
        spam_score = data.get("spam_score", 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ä–∏—Å–∫–∞
        if spam_score <= 3:
            risk_icon = "üü¢"
            risk_text = "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        elif spam_score <= 6:
            risk_icon = "üü°"
            risk_text = "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        else:
            risk_icon = "üî¥"
            risk_text = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        
        spam_text = (
            f"üõ° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            f"{risk_icon} <b>–°–ø–∞–º-–æ—Ü–µ–Ω–∫–∞:</b> {spam_score}/10\n"
            f"üìä <b>–†–∏—Å–∫:</b> {risk_text}\n\n"
        )
        
        if data.get("suggestions"):
            spam_text += "<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for suggestion in data["suggestions"][:3]:
                spam_text += f"‚Ä¢ {suggestion}\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="ai_generate")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_assistant_menu")]
            ]
        )
        
    else:
        spam_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n{result['error']}"
        keyboard = back_keyboard("ai_assistant_menu")
    
    await loading_msg.edit_text(
        spam_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.answer()