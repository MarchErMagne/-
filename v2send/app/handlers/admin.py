from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, text
from app.database.database import get_db
from app.database.models import User, Campaign, Contact, Payment, SubscriptionStatus
from app.utils.keyboards import back_keyboard
from app.utils.decorators import handle_errors, log_user_action
from app.config import SUBSCRIPTION_PLANS
from datetime import datetime, timedelta
import logging
import asyncio

router = Router()
logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
MAIN_ADMIN_IDS = [7594615184]
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã (—É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å)
ADDITIONAL_ADMIN_IDS = []

def get_all_admin_ids():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –∞–¥–º–∏–Ω–æ–≤"""
    return MAIN_ADMIN_IDS + ADDITIONAL_ADMIN_IDS

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in get_all_admin_ids()

class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()
    waiting_for_user_id = State()
    waiting_for_subscription_days = State()
    waiting_for_new_admin_id = State()

@router.message(Command("admin"))
@handle_errors
@log_user_action("admin_panel")
async def admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    async for db in get_db():
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        users_result = await db.execute(select(func.count(User.id)))
        total_users = users_result.scalar()
        
        active_users_result = await db.execute(
            select(func.count(User.id)).where(User.subscription_status == SubscriptionStatus.ACTIVE)
        )
        active_users = active_users_result.scalar()
        
        campaigns_result = await db.execute(select(func.count(Campaign.id)))
        total_campaigns = campaigns_result.scalar()
        
        payments_result = await db.execute(
            select(func.count(Payment.id)).where(Payment.status == "paid")
        )
        total_payments = payments_result.scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.utcnow() - timedelta(days=1)
        
        new_users_result = await db.execute(
            select(func.count(User.id)).where(User.created_at >= yesterday)
        )
        new_users = new_users_result.scalar()
        
        new_payments_result = await db.execute(
            select(func.count(Payment.id)).where(
                and_(Payment.paid_at >= yesterday, Payment.status == "paid")
            )
        )
        new_payments = new_payments_result.scalar()
        
        # –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
        month_ago = datetime.utcnow() - timedelta(days=30)
        revenue_result = await db.execute(
            select(func.sum(Payment.amount)).where(
                and_(Payment.paid_at >= month_ago, Payment.status == "paid")
            )
        )
        monthly_revenue = (revenue_result.scalar() or 0) / 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–æ–ª–ª–∞—Ä—ã
    
    admin_text = (
        f"üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}\n"
        f"üì¨ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n\n"
        f"üìà <b>–ó–∞ 24 —á–∞—Å–∞:</b>\n"
        f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}\n"
        f"üí≥ –ù–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {new_payments}\n\n"
        f"üíµ <b>–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü:</b> ${monthly_revenue:.2f}\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        f"/user &lt;id&gt; - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        f"/grant &lt;id&gt; &lt;plan&gt; &lt;days&gt; - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"/revoke &lt;id&gt; - –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"/cleanup - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        f"/addadmin &lt;id&gt; - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
            ],
            [
                types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                types.InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")
            ],
            [
                types.InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω—ã", callback_data="admin_manage"),
                types.InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="admin_cleanup")
            ]
        ]
    )
    
    await message.answer(admin_text, parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏

@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
        
    await admin_stats_handler(callback.message)
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
        
    await admin_broadcast_start(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    async for db in get_db():
        # –¢–æ–ø-10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await db.execute(
            select(User).order_by(User.created_at.desc()).limit(10)
        )
        recent_users = result.scalars().all()
        
        users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        
        for user in recent_users:
            status_icon = "‚úÖ" if user.subscription_status == SubscriptionStatus.ACTIVE else "‚ùå"
            users_text += (
                f"{status_icon} <b>{user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
                f"   ID: {user.telegram_id}\n"
                f"   Username: @{user.username or '–ù–µ—Ç'}\n"
                f"   –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription_plan or '–ù–µ—Ç'}\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(users_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "admin_payments")
async def admin_payments_callback(callback: types.CallbackQuery):
    """–ü–ª–∞—Ç–µ–∂–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    async for db in get_db():
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–ª–∞—Ç–µ–∂–µ–π
        result = await db.execute(
            select(Payment).where(Payment.status == "paid")
            .order_by(Payment.paid_at.desc()).limit(10)
        )
        recent_payments = result.scalars().all()
        
        payments_text = "üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
        
        for payment in recent_payments:
            amount_usd = payment.amount / 100
            payments_text += (
                f"üí∞ ${amount_usd:.2f}\n"
                f"   –ü–ª–∞–Ω: {payment.plan}\n"
                f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user_id}\n"
                f"   –î–∞—Ç–∞: {payment.paid_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(payments_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "admin_manage")
async def admin_manage_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    if callback.from_user.id not in MAIN_ADMIN_IDS:
        await callback.answer("üö´ –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏", show_alert=True)
        return
    
    manage_text = (
        "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        f"üë®‚Äçüíº <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã:</b>\n"
    )
    
    for admin_id in MAIN_ADMIN_IDS:
        manage_text += f"‚Ä¢ {admin_id}\n"
    
    if ADDITIONAL_ADMIN_IDS:
        manage_text += f"\nüë§ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã:</b>\n"
        for admin_id in ADDITIONAL_ADMIN_IDS:
            manage_text += f"‚Ä¢ {admin_id}\n"
    else:
        manage_text += "\nüë§ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç</b>\n"
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")],
            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(manage_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "add_admin")
async def add_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id not in MAIN_ADMIN_IDS:
        await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_new_admin_id)
    await callback.answer()

@router.message(AdminStates.waiting_for_new_admin_id)
async def process_new_admin_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        new_admin_id = int(message.text.strip())
        
        if new_admin_id in get_all_admin_ids():
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
            return
        
        ADDITIONAL_ADMIN_IDS.append(new_admin_id)
        
        await message.answer(
            f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ ID: {new_admin_id}\n"
            f"üìù –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await message.bot.send_message(
                new_admin_id,
                "üéâ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"Couldn't notify new admin {new_admin_id}: {e}")
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data == "remove_admin")
async def remove_admin_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id not in MAIN_ADMIN_IDS:
        await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    if not ADDITIONAL_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    remove_text = "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å:\n\n"
    
    keyboard_buttons = []
    for admin_id in ADDITIONAL_ADMIN_IDS:
        remove_text += f"‚Ä¢ {admin_id}\n"
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"‚ùå {admin_id}",
                callback_data=f"confirm_remove_admin_{admin_id}"
            )
        ])
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")
    ])
    
    await callback.message.edit_text(
        remove_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_remove_admin_"))
async def confirm_remove_admin(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id not in MAIN_ADMIN_IDS:
        await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    admin_id = int(callback.data.split("_")[-1])
    
    if admin_id in ADDITIONAL_ADMIN_IDS:
        ADDITIONAL_ADMIN_IDS.remove(admin_id)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"üë§ ID: {admin_id}\n"
            f"üìù –£ –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")]
                ]
            )
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await callback.bot.send_message(
                admin_id,
                "‚ö†Ô∏è <b>–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã</b>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"Couldn't notify removed admin {admin_id}: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_cleanup")
async def admin_cleanup_callback(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
        
    await admin_cleanup_handler(callback.message)
    await callback.answer()

@router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
        
    await admin_panel(callback.message)
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã

@router.message(Command("stats"))
@handle_errors
async def admin_stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await admin_stats_handler(message)

async def admin_stats_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    async for db in get_db():
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º –ø–æ–¥–ø–∏—Å–∫–∏
        plan_stats = {}
        for plan_id in SUBSCRIPTION_PLANS.keys():
            result = await db.execute(
                select(func.count(User.id)).where(
                    and_(
                        User.subscription_plan == plan_id,
                        User.subscription_status == SubscriptionStatus.ACTIVE
                    )
                )
            )
            count = result.scalar()
            if count > 0:
                plan_stats[plan_id] = count
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        daily_stats = []
        for i in range(7):
            day_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=i)
            day_end = day_start + timedelta(days=1)
            
            result = await db.execute(
                select(func.count(User.id)).where(
                    and_(User.created_at >= day_start, User.created_at < day_end)
                )
            )
            count = result.scalar()
            daily_stats.append((day_start.strftime('%d.%m'), count))
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        result = await db.execute(
            select(
                User.telegram_id,
                User.first_name,
                func.count(Campaign.id).label('campaigns_count')
            )
            .join(Campaign, User.id == Campaign.user_id)
            .group_by(User.id, User.telegram_id, User.first_name)
            .order_by(func.count(Campaign.id).desc())
            .limit(5)
        )
        top_users = result.all()
    
    stats_text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    if plan_stats:
        stats_text += "<b>–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–ª–∞–Ω–∞–º:</b>\n"
        for plan_id, count in plan_stats.items():
            plan_name = SUBSCRIPTION_PLANS[plan_id]["name"]
            stats_text += f"‚Ä¢ {plan_name}: {count}\n"
        stats_text += "\n"
    
    if daily_stats:
        stats_text += "<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º:</b>\n"
        for date_str, count in reversed(daily_stats):
            stats_text += f"‚Ä¢ {date_str}: {count}\n"
        stats_text += "\n"
    
    if top_users:
        stats_text += "<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
        for user_id, name, campaigns_count in top_users:
            stats_text += f"‚Ä¢ {name} ({user_id}): {campaigns_count} –∫–∞–º–ø–∞–Ω–∏–π\n"
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    if hasattr(message, 'edit_text'):
        await message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(stats_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("broadcast"))
@handle_errors
async def admin_broadcast_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await admin_broadcast_start(message, state)

async def admin_broadcast_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    broadcast_text = (
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "üìù <b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º\n\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ]
    )
    
    if hasattr(message, 'edit_text'):
        await message.edit_text(broadcast_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(broadcast_text, parse_mode="HTML", reply_markup=keyboard)
    
    await state.set_state(AdminStates.waiting_for_broadcast_message)

@router.message(AdminStates.waiting_for_broadcast_message)
@handle_errors
async def admin_broadcast_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async for db in get_db():
        result = await db.execute(select(User.telegram_id))
        user_ids = [row[0] for row in result.all()]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = "text"
    media_file_id = None
    caption = message.text or message.caption or ""
    
    if message.photo:
        message_type = "photo"
        media_file_id = message.photo[-1].file_id
    elif message.video:
        message_type = "video"
        media_file_id = message.video.file_id
    elif message.document:
        message_type = "document"
        media_file_id = message.document.file_id
    elif message.animation:
        message_type = "animation"
        media_file_id = message.animation.file_id
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_text = (
        f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìù <b>–¢–∏–ø:</b> {message_type}\n"
        f"üìÑ <b>–¢–µ–∫—Å—Ç:</b> {caption[:100]}{'...' if len(caption) > 100 else ''}\n\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {len(user_ids)}\n\n"
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
            ]
        ]
    )
    
    await state.update_data(
        message_type=message_type,
        media_file_id=media_file_id,
        caption=caption,
        user_ids=user_ids
    )
    
    await message.answer(confirm_text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "confirm_broadcast")
@handle_errors
async def admin_broadcast_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    data = await state.get_data()
    message_type = data["message_type"]
    media_file_id = data.get("media_file_id")
    caption = data["caption"]
    user_ids = data["user_ids"]
    
    await callback.message.edit_text(
        f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_count = 0
    failed_count = 0
    
    for user_id in user_ids:
        try:
            if message_type == "text":
                await callback.bot.send_message(
                    chat_id=user_id,
                    text=caption,
                    parse_mode="HTML"
                )
            elif message_type == "photo":
                await callback.bot.send_photo(
                    chat_id=user_id,
                    photo=media_file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif message_type == "video":
                await callback.bot.send_video(
                    chat_id=user_id,
                    video=media_file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif message_type == "document":
                await callback.bot.send_document(
                    chat_id=user_id,
                    document=media_file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif message_type == "animation":
                await callback.bot.send_animation(
                    chat_id=user_id,
                    animation=media_file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            
            sent_count += 1
            
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await asyncio.sleep(0.05)
    
    result_text = (
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        f"üìä –í—Å–µ–≥–æ: {len(user_ids)}"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard)
    await state.clear()
    
    logger.info(f"Admin broadcast completed: {sent_count} sent, {failed_count} failed")
    await callback.answer()

@router.callback_query(F.data == "cancel_broadcast")
@handle_errors
async def admin_broadcast_cancelled(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@router.message(Command("user"))
@handle_errors
async def admin_user_info_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await admin_user_info_handler(message)

async def admin_user_info_handler(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <telegram_id>")
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        campaigns_result = await db.execute(
            select(func.count(Campaign.id)).where(Campaign.user_id == user.id)
        )
        campaigns_count = campaigns_result.scalar()
        
        contacts_result = await db.execute(
            select(func.count(Contact.id)).where(Contact.user_id == user.id)
        )
        contacts_count = contacts_result.scalar()
        
        payments_result = await db.execute(
            select(func.count(Payment.id), func.sum(Payment.amount)).where(
                and_(Payment.user_id == user.id, Payment.status == "paid")
            )
        )
        payments_data = payments_result.first()
        payments_count = payments_data[0] or 0
        total_paid = (payments_data[1] or 0) / 100
    
    user_info_text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"üÜî <b>ID:</b> {user.telegram_id}\n"
        f"üë®‚Äçüíº <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìù <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåê <b>–Ø–∑—ã–∫:</b> {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
        f"‚Ä¢ –ü–ª–∞–Ω: {user.subscription_plan or '–ù–µ—Ç'}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.subscription_status.value if user.subscription_status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
        f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {user.subscription_expires.strftime('%d.%m.%Y %H:%M') if user.subscription_expires else '–ù–µ—Ç'}\n\n"
        f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–π: {campaigns_count}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}\n"
        f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${total_paid:.2f}"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üí≥ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                    callback_data=f"grant_sub_{user.telegram_id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                    callback_data=f"revoke_sub_{user.telegram_id}"
                )
            ],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await message.answer(user_info_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("grant"))
@handle_errors
async def admin_grant_subscription_command(message: types.Message):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await admin_grant_subscription_handler(message)

async def admin_grant_subscription_handler(message: types.Message):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /grant <user_id> <plan> <days>
    args = message.text.split()
    if len(args) < 4:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <plan> <days>\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {', '.join(SUBSCRIPTION_PLANS.keys())}"
        )
        return
    
    try:
        user_id = int(args[1])
        plan = args[2]
        days = int(args[3])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        return
    
    if plan not in SUBSCRIPTION_PLANS:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(SUBSCRIPTION_PLANS.keys())}")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user.subscription_plan = plan
        user.subscription_status = SubscriptionStatus.ACTIVE
        user.subscription_expires = datetime.utcnow() + timedelta(days=days)
        
        await db.commit()
    
    plan_name = SUBSCRIPTION_PLANS[plan]["name"]
    success_text = (
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üíº –ü–ª–∞–Ω: {plan_name}\n"
        f"üìÖ –ù–∞ –¥–Ω–µ–π: {days}\n"
        f"‚è∞ –î–æ: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(success_text, parse_mode="HTML")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=(
                f"üéâ <b>–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                f"üíº –ü–ª–∞–Ω: {plan_name}\n"
                f"üìÖ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about granted subscription: {e}")

@router.message(Command("revoke"))
@handle_errors
async def admin_revoke_subscription_command(message: types.Message):
    """–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await admin_revoke_subscription_handler(message)

async def admin_revoke_subscription_handler(message: types.Message):
    """–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        old_plan = user.subscription_plan
        user.subscription_plan = None
        user.subscription_status = SubscriptionStatus.CANCELLED
        user.subscription_expires = datetime.utcnow()
        
        await db.commit()
    
    success_text = (
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üíº –ë—ã–ª –ø–ª–∞–Ω: {old_plan or '–ù–µ—Ç'}\n"
        f"üìÖ –û—Ç–æ–∑–≤–∞–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(success_text, parse_mode="HTML")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞</b>\n\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É."
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about revoked subscription: {e}")

@router.message(Command("cleanup"))
@handle_errors
async def admin_cleanup_command(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await admin_cleanup_handler(message)

async def admin_cleanup_handler(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    async for db in get_db():
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∫–∞–º–ø–∞–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
        cutoff_date = datetime.utcnow() - timedelta(days=90)
        
        result = await db.execute(
            text("DELETE FROM campaign_logs WHERE sent_at < :cutoff_date"),
            {"cutoff_date": cutoff_date}
        )
        deleted_logs = result.rowcount
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        payment_cutoff = datetime.utcnow() - timedelta(hours=24)
        
        result = await db.execute(
            text("DELETE FROM payments WHERE status = 'pending' AND created_at < :cutoff_date"),
            {"cutoff_date": payment_cutoff}
        )
        deleted_payments = result.rowcount
        
        await db.commit()
    
    cleanup_text = (
        f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìù –£–¥–∞–ª–µ–Ω–æ –ª–æ–≥–æ–≤: {deleted_logs}\n"
        f"üí≥ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {deleted_payments}\n"
        f"üìÖ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    if hasattr(message, 'edit_text'):
        await message.edit_text(cleanup_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(cleanup_text, parse_mode="HTML", reply_markup=keyboard)
    
    logger.info(f"Admin cleanup completed: {deleted_logs} logs, {deleted_payments} payments deleted")

@router.message(Command("addadmin"))
@handle_errors
async def admin_add_admin_command(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if message.from_user.id not in MAIN_ADMIN_IDS:
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤")
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <telegram_id>")
        return
    
    try:
        new_admin_id = int(args[1])
        
        if new_admin_id in get_all_admin_ids():
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
            return
        
        ADDITIONAL_ADMIN_IDS.append(new_admin_id)
        
        await message.answer(
            f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ ID: {new_admin_id}\n"
            f"üìù –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await message.bot.send_message(
                new_admin_id,
                "üéâ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"Couldn't notify new admin {new_admin_id}: {e}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π

@router.callback_query(F.data.startswith("grant_sub_"))
async def grant_subscription_callback(callback: types.CallbackQuery):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–ª–∞–Ω–æ–≤
    plans_keyboard = []
    for plan_id, plan in SUBSCRIPTION_PLANS.items():
        price_usd = plan["price"] / 100
        plans_keyboard.append([
            types.InlineKeyboardButton(
                text=f"{plan['name']} - ${price_usd:.2f} (30 –¥–Ω)",
                callback_data=f"grant_plan_{user_id}_{plan_id}_30"
            )
        ])
    
    plans_keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    await callback.message.edit_text(
        f"üí≥ <b>–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=plans_keyboard)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("grant_plan_"))
async def grant_plan_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    parts = callback.data.split("_")
    user_id = int(parts[2])
    plan = parts[3]
    days = int(parts[4])
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user.subscription_plan = plan
        user.subscription_status = SubscriptionStatus.ACTIVE
        user.subscription_expires = datetime.utcnow() + timedelta(days=days)
        
        await db.commit()
    
    plan_name = SUBSCRIPTION_PLANS[plan]["name"]
    success_text = (
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üíº –ü–ª–∞–Ω: {plan_name}\n"
        f"üìÖ –ù–∞ –¥–Ω–µ–π: {days}\n"
        f"‚è∞ –î–æ: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(success_text, parse_mode="HTML", reply_markup=keyboard)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                f"üéâ <b>–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                f"üíº –ü–ª–∞–Ω: {plan_name}\n"
                f"üìÖ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about granted subscription: {e}")
    
    await callback.answer()

@router.callback_query(F.data.startswith("revoke_sub_"))
async def revoke_subscription_callback(callback: types.CallbackQuery):
    """–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–æ–∑–≤–∞—Ç—å", callback_data=f"confirm_revoke_{user_id}"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        parse_mode="HTML",
        reply_markup=confirm_keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_revoke_"))
async def confirm_revoke_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    async for db in get_db():
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        old_plan = user.subscription_plan
        user.subscription_plan = None
        user.subscription_status = SubscriptionStatus.CANCELLED
        user.subscription_expires = datetime.utcnow()
        
        await db.commit()
    
    success_text = (
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üíº –ë—ã–ª –ø–ª–∞–Ω: {old_plan or '–ù–µ—Ç'}\n"
        f"üìÖ –û—Ç–æ–∑–≤–∞–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
    )
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(success_text, parse_mode="HTML", reply_markup=keyboard)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞</b>\n\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É."
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about revoked subscription: {e}")
    
    await callback.answer()