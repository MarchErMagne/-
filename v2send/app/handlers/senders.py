from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.database import get_db
from app.database.models import User, Sender, SenderType, SubscriptionStatus
from app.utils.keyboards import sender_type_keyboard, back_keyboard, confirm_keyboard
from app.utils.decorators import handle_errors, log_user_action, subscription_required
from app.utils.validators import (
    validate_email_address,
    validate_telegram_api_settings,
    validate_phone_number,
)
from app.config import SUBSCRIPTION_PLANS

import logging

# --- Telethon (Telegram login flow) ---
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import (
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
)

router = Router()
logger = logging.getLogger(__name__)


class SenderStates(StatesGroup):
    # –û–±—â–∏–µ
    waiting_for_name = State()

    # Telegram
    waiting_for_telegram_api_id = State()
    waiting_for_telegram_api_hash = State()
    waiting_for_telegram_phone = State()
    waiting_for_telegram_code = State()
    waiting_for_telegram_2fa = State()

    # Email
    waiting_for_email_host = State()
    waiting_for_email_port = State()
    waiting_for_email_login = State()
    waiting_for_email_password = State()

    # WhatsApp / SMS / Viber
    waiting_for_whatsapp_token = State()
    waiting_for_sms_api_key = State()
    waiting_for_viber_api_key = State()


# ======================= –ú–ï–ù–Æ –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï–ô =======================

@router.message(F.text == "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏")
@subscription_required()
@handle_errors
@log_user_action("senders_menu")
async def senders_menu(message: types.Message, user: User, db: AsyncSession, **kwargs):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π."""
    count_q = await db.execute(select(func.count(Sender.id)).where(Sender.user_id == user.id))
    senders_count = count_q.scalar()

    plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
    limit = plan["senders_limit"]

    items_q = await db.execute(
        select(Sender).where(Sender.user_id == user.id).order_by(Sender.created_at.desc())
    )
    senders = items_q.scalars().all()

    type_icons = {
        SenderType.TELEGRAM: "üì±",
        SenderType.EMAIL: "üìß",
        SenderType.WHATSAPP: "üí¨",
        SenderType.SMS: "üìû",
        SenderType.VIBER: "üü£"
    }

    text = (
        f"üìß <b>–ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏</b>\n\n"
        f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {senders_count}/{limit}\n\n"
    )

    if senders:
        text += "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏:</b>\n\n"
        for s in senders:
            status_icon = "‚úÖ" if s.is_verified else "‚ö†Ô∏è"
            type_icon = type_icons.get(s.type, "‚ùì")
            text += (
                f"{type_icon} <b>{s.name}</b>\n"
                f"   {status_icon} {s.type.value.capitalize()}\n"
                f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {s.created_at.strftime('%d.%m.%Y')}\n\n"
            )
    else:
        text += "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π</b>\n\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ + –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è + –Ω–∞–∑–∞–¥
    if senders_count < limit:
        base_kb = sender_type_keyboard()
        kb_rows = list(base_kb.inline_keyboard) if base_kb and base_kb.inline_keyboard else []
        kb_rows.append([types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data="senders_delete_menu")])
        kb_rows.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    else:
        text += f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞ {user.subscription_plan.capitalize()}"
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data="senders_delete_menu")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
        )

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "senders_menu")
@handle_errors
async def senders_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ callback)."""
    await state.clear()
    user_id = callback.from_user.id

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)

        if user.subscription_status != SubscriptionStatus.ACTIVE:
            return await callback.answer("üîí –ù—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)

        count_q = await db.execute(select(func.count(Sender.id)).where(Sender.user_id == user.id))
        senders_count = count_q.scalar()

        plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
        limit = plan["senders_limit"]

        items_q = await db.execute(
            select(Sender).where(Sender.user_id == user.id).order_by(Sender.created_at.desc())
        )
        senders = items_q.scalars().all()

        type_icons = {
            SenderType.TELEGRAM: "üì±",
            SenderType.EMAIL: "üìß",
            SenderType.WHATSAPP: "üí¨",
            SenderType.SMS: "üìû",
            SenderType.VIBER: "üü£"
        }

        text = (
            f"üìß <b>–ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏</b>\n\n"
            f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {senders_count}/{limit}\n\n"
        )

        if senders:
            text += "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏:</b>\n\n"
            for s in senders:
                status_icon = "‚úÖ" if s.is_verified else "‚ö†Ô∏è"
                type_icon = type_icons.get(s.type, "‚ùì")
                text += (
                    f"{type_icon} <b>{s.name}</b>\n"
                    f"   {status_icon} {s.type.value.capitalize()}\n"
                    f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {s.created_at.strftime('%d.%m.%Y')}\n\n"
                )
        else:
            text += "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π</b>\n\n"

        if senders_count < limit:
            base_kb = sender_type_keyboard()
            kb_rows = list(base_kb.inline_keyboard) if base_kb and base_kb.inline_keyboard else []
            kb_rows.append([types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data="senders_delete_menu")])
            kb_rows.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        else:
            text += f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞ {user.subscription_plan.capitalize()}"
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data="senders_delete_menu")],
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
                ]
            )

        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

    await callback.answer()


# ======================= –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø: –í–´–ë–û–† –¢–ò–ü–ê =======================

@router.callback_query(F.data.startswith("sender_"))
@handle_errors
async def add_sender_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (telegram/email/...)."""
    sender_type = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        count_q = await db.execute(select(func.count(Sender.id)).where(Sender.user_id == user.id))
        senders_count = count_q.scalar()

        plan = SUBSCRIPTION_PLANS.get(user.subscription_plan, SUBSCRIPTION_PLANS["basic"])
        if senders_count >= plan["senders_limit"]:
            return await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π", show_alert=True)

    await state.update_data(sender_type=sender_type)

    type_names = {
        "telegram": "Telegram",
        "email": "Email",
        "whatsapp": "WhatsApp",
        "sms": "SMS",
        "viber": "Viber"
    }

    type_descriptions = {
        "telegram": "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Telegram –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è API ID –∏ API Hash (my.telegram.org). –î–∞–ª–µ–µ –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –∫–æ–¥ –∏–∑ Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
        "email": "–î–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω—ã SMTP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
        "whatsapp": "–î–ª—è WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω Twilio API.",
        "sms": "–î–ª—è SMS —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω API-–∫–ª—é—á SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.",
        "viber": "–î–ª—è Viber —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω API-–∫–ª—é—á Viber Business.",
    }

    setup_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {type_names.get(sender_type, sender_type)}</b>\n\n"
        f"üìù {type_descriptions.get(sender_type, '')}\n\n"
        f"üí° <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b>\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç', '–ü—Ä–æ–º–æ —Ä–∞—Å—Å—ã–ª–∫–∏')"
    )

    await callback.message.edit_text(setup_text, parse_mode="HTML", reply_markup=back_keyboard("senders_menu"))
    await state.set_state(SenderStates.waiting_for_name)
    await callback.answer()


@router.message(SenderStates.waiting_for_name)
@handle_errors
async def process_sender_name(message: types.Message, state: FSMContext):
    """–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    name = (message.text or "").strip()
    if len(name) < 3:
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    if len(name) > 50:
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")

    data = await state.get_data()
    sender_type = data["sender_type"]
    await state.update_data(sender_name=name)

    if sender_type == "telegram":
        await message.answer(
            "üì± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org\n"
            "2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "3Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ API ID –∏ API Hash\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ API ID:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_telegram_api_id)

    elif sender_type == "email":
        await message.answer(
            "üìß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ SMTP —Ö–æ—Å—Ç:</b>\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: smtp.gmail.com, smtp.yandex.ru)",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_email_host)

    elif sender_type == "whatsapp":
        await message.answer(
            "üí¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WhatsApp –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ Auth Token (Twilio):</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_whatsapp_token)

    elif sender_type == "sms":
        await message.answer(
            "üìû <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMS –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_sms_api_key)

    elif sender_type == "viber":
        await message.answer(
            "üü£ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Viber –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Viber:</b>",
            parse_mode="HTML"
        )
        await state.set_state(SenderStates.waiting_for_viber_api_key)


# ======================= TELEGRAM: API / PHONE / CODE / 2FA =======================

@router.message(SenderStates.waiting_for_telegram_api_id)
@handle_errors
async def process_telegram_api_id(message: types.Message, state: FSMContext):
    try:
        api_id = int((message.text or "").strip())
        if api_id <= 0:
            raise ValueError
    except ValueError:
        return await message.answer("‚ùå API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    await state.update_data(api_id=api_id)
    await message.answer("üîê <b>–í–≤–µ–¥–∏—Ç–µ API Hash:</b>\n(32-—Å–∏–º–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)", parse_mode="HTML")
    await state.set_state(SenderStates.waiting_for_telegram_api_hash)


@router.message(SenderStates.waiting_for_telegram_api_hash)
@handle_errors
async def process_telegram_api_hash(message: types.Message, state: FSMContext):
    api_hash = (message.text or "").strip()
    data = await state.get_data()
    api_id = str(data.get("api_id", ""))

    ok, err = validate_telegram_api_settings(api_id, api_hash)
    if not ok:
        return await message.answer(f"‚ùå {err}")

    await state.update_data(api_hash=api_hash)
    await message.answer(
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n(—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)",
        parse_mode="HTML"
    )
    await state.set_state(SenderStates.waiting_for_telegram_phone)


@router.message(SenderStates.waiting_for_telegram_phone)
@handle_errors
async def process_telegram_phone(message: types.Message, state: FSMContext):
    phone = (message.text or "").strip()
    ok, clean_phone = validate_phone_number(phone)
    if not ok:
        return await message.answer(f"‚ùå {clean_phone}")

    data = await state.get_data()
    api_id = data["api_id"]
    api_hash = data["api_hash"]

    client = TelegramClient(StringSession(), api_id, api_hash)
    await client.connect()
    try:
        sent = await client.send_code_request(clean_phone)
    except PhoneNumberInvalidError:
        await client.disconnect()
        return await message.answer("‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await client.disconnect()
        logger.exception("send_code_request failed: %s", e)
        return await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.update_data(
        tg_tmp_session=client.session.save(),
        tg_phone=clean_phone,
        tg_phone_code_hash=sent.phone_code_hash,
    )
    await client.disconnect()

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑", callback_data="tg_resend_code")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="senders_menu")],
        ]
    )
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram (5 —Ü–∏—Ñ—Ä). –ï—Å–ª–∏ –∫–æ–¥ –ø—Ä–∏—à—ë–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –≤–æ–∑—å–º–∏—Ç–µ –µ–≥–æ —Ç–∞–º.",
        parse_mode="HTML",
        reply_markup=kb,
    )
    await state.set_state(SenderStates.waiting_for_telegram_code)


@router.callback_query(F.data == "tg_resend_code")
@handle_errors
async def tg_resend_code(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    data = await state.get_data()
    api_id = data.get("api_id")
    api_hash = data.get("api_hash")
    phone = data.get("tg_phone")
    tmp_session = data.get("tg_tmp_session")

    if not (api_id and api_hash and phone):
        return await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)

    client = TelegramClient(StringSession(tmp_session or ""), api_id, api_hash)
    await client.connect()
    try:
        sent = await client.send_code_request(phone)
        await state.update_data(
            tg_tmp_session=client.session.save(),
            tg_phone_code_hash=sent.phone_code_hash
        )
    except PhoneNumberInvalidError:
        await client.disconnect()
        return await callback.answer("–ù–æ–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
    except Exception as e:
        await client.disconnect()
        logger.exception("Resend code failed: %s", e)
        return await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    await client.disconnect()

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑", callback_data="tg_resend_code")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="senders_menu")],
        ]
    )
    try:
        await callback.message.edit_text(
            "üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∏–∑ Telegram (5 —Ü–∏—Ñ—Ä).",
            parse_mode="HTML",
            reply_markup=kb,
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

    await callback.answer("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–Ω–æ–≤–æ.")


@router.message(SenderStates.waiting_for_telegram_code)
@handle_errors
async def process_telegram_code(message: types.Message, state: FSMContext):
    code = (message.text or "").strip().replace(" ", "")
    if not code.isdigit():
        return await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

    data = await state.get_data()
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone = data["tg_phone"]
    phone_code_hash = data["tg_phone_code_hash"]
    tmp_session = data["tg_tmp_session"]

    client = TelegramClient(StringSession(tmp_session or ""), api_id, api_hash)
    await client.connect()
    try:
        try:
            await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)
        except SessionPasswordNeededError:
            await state.update_data(tg_tmp_session=client.session.save())
            await client.disconnect()
            await message.answer("üîí –£ –≤–∞—Å –≤–∫–ª—é—á—ë–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA). –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            await state.set_state(SenderStates.waiting_for_telegram_2fa)
            return
    except PhoneCodeInvalidError:
        await client.disconnect()
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except PhoneCodeExpiredError:
        await client.disconnect()
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑", callback_data="tg_resend_code")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="senders_menu")],
            ]
        )
        return await message.answer("‚åõ –ö–æ–¥ –∏—Å—Ç—ë–∫. –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.", reply_markup=kb)
    except Exception as e:
        await client.disconnect()
        logger.exception("sign_in failed: %s", e)
        return await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    session_str = client.session.save()
    me = await client.get_me()
    await client.disconnect()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await state.clear()
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

        sender_name = data["sender_name"]
        sender = Sender(
            user_id=user.id,
            name=sender_name,
            type=SenderType.TELEGRAM,
            config={
                "session": session_str,
                "api_id": api_id,
                "api_hash": api_hash,
                "phone": phone,
                "user_id": getattr(me, "id", None),
                "username": getattr(me, "username", None),
            },
            is_active=True,
            is_verified=True,
        )
        db.add(sender)
        await db.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ <b>Telegram-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å '{sender_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ —ç—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º.",
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu"),
    )


@router.message(SenderStates.waiting_for_telegram_2fa)
@handle_errors
async def process_telegram_2fa(message: types.Message, state: FSMContext):
    password = (message.text or "").strip()
    data = await state.get_data()
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    tmp_session = data.get("tg_tmp_session", "")
    phone = data.get("tg_phone", "")

    client = TelegramClient(StringSession(tmp_session or ""), api_id, api_hash)
    await client.connect()
    try:
        await client.sign_in(password=password)
    except Exception as e:
        await client.disconnect()
        logger.exception("2FA sign_in failed: %s", e)
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π 2FA –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    session_str = client.session.save()
    me = await client.get_me()
    await client.disconnect()

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await state.clear()
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

        sender_name = data["sender_name"]
        sender = Sender(
            user_id=user.id,
            name=sender_name,
            type=SenderType.TELEGRAM,
            config={
                "session": session_str,
                "api_id": api_id,
                "api_hash": api_hash,
                "phone": phone,
                "user_id": getattr(me, "id", None),
                "username": getattr(me, "username", None),
            },
            is_active=True,
            is_verified=True,
        )
        db.add(sender)
        await db.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ <b>Telegram-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å '{sender_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>",
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu"),
    )


# ======================= EMAIL =======================

@router.message(SenderStates.waiting_for_email_host)
@handle_errors
async def process_email_host(message: types.Message, state: FSMContext):
    host = (message.text or "").strip()
    if not host:
        return await message.answer("‚ùå SMTP —Ö–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    await state.update_data(smtp_host=host)
    await message.answer("üî¢ <b>–í–≤–µ–¥–∏—Ç–µ SMTP –ø–æ—Ä—Ç:</b>\n(–æ–±—ã—á–Ω–æ 587 –¥–ª—è TLS –∏–ª–∏ 465 –¥–ª—è SSL)", parse_mode="HTML")
    await state.set_state(SenderStates.waiting_for_email_port)


@router.message(SenderStates.waiting_for_email_port)
@handle_errors
async def process_email_port(message: types.Message, state: FSMContext):
    try:
        port = int((message.text or "").strip())
        if not (1 <= port <= 65535):
            raise ValueError
    except ValueError:
        return await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535")

    await state.update_data(smtp_port=port)
    await message.answer("üìß <b>–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å:</b>", parse_mode="HTML")
    await state.set_state(SenderStates.waiting_for_email_login)


@router.message(SenderStates.waiting_for_email_login)
@handle_errors
async def process_email_login(message: types.Message, state: FSMContext):
    email = (message.text or "").strip()
    ok, clean = validate_email_address(email)
    if not ok:
        return await message.answer(f"‚ùå {clean}")

    await state.update_data(email=clean)
    await message.answer("üîê <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>\n(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å App Password)", parse_mode="HTML")
    await state.set_state(SenderStates.waiting_for_email_password)


@router.message(SenderStates.waiting_for_email_password)
@handle_errors
async def process_email_password(message: types.Message, state: FSMContext):
    password = (message.text or "").strip()
    if not password:
        return await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    data = await state.get_data()

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await state.clear()
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

        sender = Sender(
            user_id=user.id,
            name=data["sender_name"],
            type=SenderType.EMAIL,
            config={
                "smtp_host": data["smtp_host"],
                "smtp_port": data["smtp_port"],
                "email": data["email"],
                "password": password,
                "use_tls": True
            },
            is_active=True,
            is_verified=False,
        )
        db.add(sender)
        await db.commit()

    await state.clear()
    await message.answer(
        "‚úÖ <b>Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ",
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu"),
    )
    logger.info(f"Email sender added for user {message.from_user.id}")


# ======================= WHATSAPP / SMS / VIBER =======================

@router.message(SenderStates.waiting_for_whatsapp_token)
@handle_errors
async def process_whatsapp_token(message: types.Message, state: FSMContext):
    token = (message.text or "").strip()
    if not token:
        return await message.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    data = await state.get_data()

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await state.clear()
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

        sender = Sender(
            user_id=user.id,
            name=data["sender_name"],
            type=SenderType.WHATSAPP,
            config={
                "auth_token": token,
                "account_sid": "auto",
                "from_number": "whatsapp:+14155238886"
            },
            is_active=True,
            is_verified=False,
        )
        db.add(sender)
        await db.commit()

    await state.clear()
    await message.answer(
        "‚úÖ <b>WhatsApp –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ",
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu"),
    )
    logger.info(f"WhatsApp sender added for user {message.from_user.id}")


@router.message(SenderStates.waiting_for_sms_api_key)
@handle_errors
async def process_sms_api_key(message: types.Message, state: FSMContext):
    api_key = (message.text or "").strip()
    if not api_key:
        return await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    data = await state.get_data()

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await state.clear()
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

        sender = Sender(
            user_id=user.id,
            name=data["sender_name"],
            type=SenderType.SMS,
            config={
                "api_key": api_key,
                "api_url": "https://api.sms.ru/sms/send",
                "sender_name": data["sender_name"]
            },
            is_active=True,
            is_verified=False,
        )
        db.add(sender)
        await db.commit()

    await state.clear()
    await message.answer(
        "‚úÖ <b>SMS –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ",
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu"),
    )
    logger.info(f"SMS sender added for user {message.from_user.id}")


@router.message(SenderStates.waiting_for_viber_api_key)
@handle_errors
async def process_viber_api_key(message: types.Message, state: FSMContext):
    api_key = (message.text or "").strip()
    if not api_key:
        return await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    data = await state.get_data()

    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await state.clear()
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

        sender = Sender(
            user_id=user.id,
            name=data["sender_name"],
            type=SenderType.VIBER,
            config={
                "api_key": api_key,
                "api_url": "https://chatapi.viber.com/pa/send_message",
                "sender_name": data["sender_name"]
            },
            is_active=True,
            is_verified=False,
        )
        db.add(sender)
        await db.commit()

    await state.clear()
    await message.answer(
        "‚úÖ <b>Viber –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ",
        parse_mode="HTML",
        reply_markup=back_keyboard("senders_menu"),
    )
    logger.info(f"Viber sender added for user {message.from_user.id}")


# ======================= –£–î–ê–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï–ô =======================

@router.callback_query(F.data == "senders_delete_menu")
@handle_errors
async def senders_delete_menu(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = callback.from_user.id
    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)

        q = await db.execute(select(Sender).where(Sender.user_id == user.id).order_by(Sender.created_at.desc()))
        senders = q.scalars().all()

        if not senders:
            try:
                await callback.message.edit_text(
                    "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                    reply_markup=back_keyboard("senders_menu"),
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    pass
                else:
                    raise
            return

        kb_rows = []
        for s in senders:
            kb_rows.append([
                types.InlineKeyboardButton(text=f"üóë {s.name} ({s.type.value})", callback_data=f"sender_delete_{s.id}")
            ])
        kb_rows.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="senders_menu")])

        text = "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å:"
        try:
            await callback.message.edit_text(
                text, parse_mode="HTML", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

    await callback.answer()


@router.callback_query(F.data.startswith("sender_delete_"))
@handle_errors
async def sender_delete_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    try:
        sender_id = int(callback.data.split("_")[-1])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

    user_id = callback.from_user.id
    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        sender = await db.get(Sender, sender_id)
        if not sender or sender.user_id != user.id:
            return await callback.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        text = (
            f"‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\n"
            f"<b>{sender.name}</b> ({sender.type.value})\n\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
        )
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"sender_delete_yes_{sender.id}")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="senders_delete_menu")],
            ]
        )

        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

    await callback.answer()


@router.callback_query(F.data.startswith("sender_delete_yes_"))
@handle_errors
async def sender_delete_do(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    try:
        sender_id = int(callback.data.split("_")[-1])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

    user_id = callback.from_user.id
    async for db in get_db():
        user = (await db.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        sender = await db.get(Sender, sender_id)
        if not sender or sender.user_id != user.id:
            return await callback.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        await db.delete(sender)
        await db.commit()

    # –ü–æ–∫–∞–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    try:
        await callback.message.edit_text(
            "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.",
            parse_mode="HTML",
            reply_markup=back_keyboard("senders_delete_menu"),
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
