from celery import Celery
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy import select, and_
from app.config import settings
from app.database.models import User, Subscription, SubscriptionStatus
from datetime import datetime, timedelta
import asyncio
import logging
from aiogram import Bot

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery
celery_app = Celery(
    'notifications',
    broker=settings.CELERY_BROKER_URL,
    backend=settings.CELERY_RESULT_BACKEND
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
engine = create_async_engine(settings.DATABASE_URL)
AsyncSessionLocal = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def get_async_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î"""
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

@celery_app.task
def check_expiring_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return asyncio.run(check_expiring_subscriptions_async())

async def check_expiring_subscriptions_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        bot = Bot(token=settings.BOT_TOKEN)
        
        async for db in get_async_db():
            # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
            expiry_threshold = datetime.utcnow() + timedelta(days=3)
            
            result = await db.execute(
                select(User).where(
                    and_(
                        User.subscription_status == SubscriptionStatus.ACTIVE,
                        User.subscription_expires <= expiry_threshold,
                        User.subscription_expires > datetime.utcnow()
                    )
                )
            )
            
            users = result.scalars().all()
            
            notifications_sent = 0
            
            for user in users:
                try:
                    days_left = (user.subscription_expires - datetime.utcnow()).days
                    
                    if days_left <= 1:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                        message = (
                            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç!</b>\n\n"
                            f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω.\n"
                            f"üíº –ü–ª–∞–Ω: {user.subscription_plan.capitalize()}\n\n"
                            "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ /start ‚Üí üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è"
                        )
                    elif days_left <= 3:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
                        message = (
                            "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
                            f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.\n"
                            f"üíº –ü–ª–∞–Ω: {user.subscription_plan.capitalize()}\n\n"
                            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ.\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ /start ‚Üí üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
                        )
                    else:
                        continue
                    
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text=message,
                        parse_mode="HTML"
                    )
                    
                    notifications_sent += 1
                    logger.info(f"Expiry notification sent to user {user.telegram_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.1)
                
                except Exception as e:
                    logger.error(f"Error sending expiry notification to {user.telegram_id}: {e}")
            
            await bot.session.close()
            
            logger.info(f"Expiry notifications sent: {notifications_sent}")
            return {"status": "success", "notifications_sent": notifications_sent}
    
    except Exception as e:
        logger.error(f"Error in check_expiring_subscriptions: {e}")
        return {"status": "error", "message": str(e)}

@celery_app.task
def deactivate_expired_subscriptions():
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return asyncio.run(deactivate_expired_subscriptions_async())

async def deactivate_expired_subscriptions_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        bot = Bot(token=settings.BOT_TOKEN)
        
        async for db in get_async_db():
            # –ò—â–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            result = await db.execute(
                select(User).where(
                    and_(
                        User.subscription_status == SubscriptionStatus.ACTIVE,
                        User.subscription_expires <= datetime.utcnow()
                    )
                )
            )
            
            users = result.scalars().all()
            deactivated_count = 0
            
            for user in users:
                try:
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    user.subscription_status = SubscriptionStatus.EXPIRED
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    message = (
                        "‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                        f"üíº –ü–ª–∞–Ω: {user.subscription_plan.capitalize()}\n"
                        f"üìÖ –ò—Å—Ç–µ–∫–ª–∞: {user.subscription_expires.strftime('%d.%m.%Y %H:%M')}\n\n"
                        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ /start ‚Üí üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
                    )
                    
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text=message,
                        parse_mode="HTML"
                    )
                    
                    deactivated_count += 1
                    logger.info(f"Subscription expired for user {user.telegram_id}")
                    
                    await asyncio.sleep(0.1)
                
                except Exception as e:
                    logger.error(f"Error deactivating subscription for {user.telegram_id}: {e}")
            
            await db.commit()
            await bot.session.close()
            
            logger.info(f"Subscriptions deactivated: {deactivated_count}")
            return {"status": "success", "deactivated": deactivated_count}
    
    except Exception as e:
        logger.error(f"Error in deactivate_expired_subscriptions: {e}")
        return {"status": "error", "message": str(e)}

@celery_app.task
def send_campaign_completion_notification(campaign_id: int, user_id: int, stats: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏"""
    return asyncio.run(send_campaign_completion_notification_async(campaign_id, user_id, stats))

async def send_campaign_completion_notification_async(campaign_id: int, user_id: int, stats: dict):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏"""
    try:
        bot = Bot(token=settings.BOT_TOKEN)
        
        async for db in get_async_db():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏–∏
            from app.database.models import Campaign
            campaign = await db.get(Campaign, campaign_id)
            
            if not campaign:
                return {"status": "error", "message": "Campaign not found"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success_rate = 0
            if stats.get("total", 0) > 0:
                success_rate = (stats.get("sent", 0) / stats["total"]) * 100
            
            message = (
                f"‚úÖ <b>–ö–∞–º–ø–∞–Ω–∏—è '{campaign.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('sent', 0)}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.get('failed', 0)}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total', 0)}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
                f"üì± –¢–∏–ø: {campaign.type.value.capitalize()}\n"
                f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
            
            await bot.session.close()
            
            logger.info(f"Campaign completion notification sent to user {user_id}")
            return {"status": "success"}
    
    except Exception as e:
        logger.error(f"Error sending campaign completion notification: {e}")
        return {"status": "error", "message": str(e)}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
celery_app.conf.beat_schedule.update({
    'check-expiring-subscriptions': {
        'task': 'app.tasks.notifications.check_expiring_subscriptions',
        'schedule': 12 * 60 * 60,  # –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
    },
    'deactivate-expired-subscriptions': {
        'task': 'app.tasks.notifications.deactivate_expired_subscriptions', 
        'schedule': 60 * 60,  # –ö–∞–∂–¥—ã–π —á–∞—Å
    },
})